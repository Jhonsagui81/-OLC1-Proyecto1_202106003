/* The following code was generated by JFlex 1.7.0 */

package statpy;
import java_cup.runtime.*;
// importar arraylist
//import java.util.ArrayList;       <-
// importar clase de excepciones
//import Errores.Exception_ ;       <-

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/statpy/Lexer.jflex</tt>
 */
public class lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\7\1\71\1\10\1\12\22\0\1\11\1\27\1\6"+
    "\1\0\1\23\1\0\1\30\1\0\1\15\1\16\1\14\1\34\1\32"+
    "\1\35\1\2\1\13\12\1\1\33\1\31\1\26\1\24\1\25\2\0"+
    "\1\44\1\53\1\57\1\42\1\46\1\47\1\51\1\63\1\41\1\66"+
    "\1\65\1\52\1\43\1\45\1\37\1\60\1\4\1\50\1\55\1\61"+
    "\1\62\1\36\1\56\1\67\1\70\1\4\1\21\1\0\1\22\1\0"+
    "\1\5\1\0\1\44\1\53\1\57\1\42\1\46\1\47\1\51\1\63"+
    "\1\41\1\66\1\65\1\52\1\43\1\45\1\37\1\60\1\4\1\50"+
    "\1\55\1\61\1\62\1\36\1\56\1\67\1\70\1\4\1\17\1\3"+
    "\1\20\7\0\1\71\113\0\1\4\37\0\1\4\76\0\2\40\115\0"+
    "\1\54\u1ea8\0\1\71\1\71\u0100\0\1\64\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\2\1\5\1\2\1\6"+
    "\2\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\2\1\25"+
    "\1\26\1\27\1\30\1\31\1\5\1\2\10\5\1\2"+
    "\4\5\1\0\1\32\1\0\1\33\1\0\1\34\1\35"+
    "\1\36\1\37\1\40\2\5\1\0\1\41\1\5\1\41"+
    "\1\42\12\5\2\0\7\5\1\0\2\5\1\43\1\44"+
    "\2\33\2\0\2\5\2\45\2\5\1\0\2\5\1\0"+
    "\2\5\1\46\4\5\2\0\2\5\1\0\1\5\1\0"+
    "\2\5\1\0\2\5\1\0\2\5\1\0\2\47\2\5"+
    "\1\0\2\5\2\50\1\5\2\51\1\52\1\0\2\5"+
    "\1\53\1\5\2\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\2\54\1\55\1\0\1\5\1\56\1\57"+
    "\2\5\1\0\3\5\2\60\1\0\1\5\2\61\2\0"+
    "\2\5\2\62\2\63\1\0\1\5\1\0\2\5\1\64"+
    "\1\0\3\5\1\0\1\5\1\65\1\66\1\65\1\66"+
    "\1\0\1\5\2\67\2\70\1\0\1\5\1\71\1\5"+
    "\1\0\1\5\2\72\1\73\1\74\1\73\1\74\1\0"+
    "\1\5\1\75\2\0\2\5\1\0\1\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\76\1\5\1\76\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\2\77\1\0\1\5\2\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\72\0\256\0\350\0\u0122\0\72"+
    "\0\72\0\u015c\0\u0196\0\72\0\72\0\72\0\72\0\72"+
    "\0\72\0\72\0\72\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8"+
    "\0\72\0\72\0\72\0\72\0\72\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536"+
    "\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\72\0\u0692\0\u06cc"+
    "\0\u0706\0\72\0\72\0\72\0\72\0\72\0\u0740\0\u077a"+
    "\0\u07b4\0\72\0\u07ee\0\350\0\u0828\0\u0862\0\u089c\0\u08d6"+
    "\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6"+
    "\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76"+
    "\0\u0cb0\0\u0cea\0\u0d24\0\u0658\0\72\0\72\0\u0d5e\0\u0d98"+
    "\0\u0dd2\0\u0e0c\0\u0e46\0\72\0\350\0\u0e80\0\u0eba\0\u0ef4"+
    "\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\350\0\u1050\0\u108a"+
    "\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a"+
    "\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a"+
    "\0\u1464\0\u149e\0\72\0\350\0\u14d8\0\u1512\0\u154c\0\u1586"+
    "\0\u15c0\0\72\0\350\0\u15fa\0\72\0\350\0\350\0\u1634"+
    "\0\u166e\0\u16a8\0\350\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca"+
    "\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\72\0\350"+
    "\0\350\0\u1960\0\u199a\0\350\0\72\0\u19d4\0\u1a0e\0\u1a48"+
    "\0\u1a82\0\u1abc\0\u1af6\0\72\0\350\0\u1b30\0\u1b6a\0\72"+
    "\0\350\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\72\0\350\0\72"+
    "\0\350\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\350\0\u1dae"+
    "\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\72\0\72\0\350"+
    "\0\350\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\72\0\350\0\u1ff2"+
    "\0\u202c\0\350\0\u2066\0\u20a0\0\u20da\0\72\0\350\0\72"+
    "\0\72\0\350\0\350\0\u2114\0\u214e\0\350\0\u2188\0\u21c2"+
    "\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392"+
    "\0\u23cc\0\u2406\0\u2440\0\72\0\u247a\0\350\0\u24b4\0\u24ee"+
    "\0\u2528\0\u2562\0\u259c\0\u25d6\0\u2610\0\u264a\0\u2684\0\u26be"+
    "\0\72\0\350\0\u26f8\0\u2732\0\72\0\350";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\2\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\6\1\37"+
    "\1\40\1\41\1\42\1\6\1\43\1\44\1\45\1\6"+
    "\1\46\1\6\1\47\1\50\1\51\1\52\1\53\1\6"+
    "\1\54\2\6\1\2\4\6\74\0\1\3\1\55\72\0"+
    "\1\56\67\0\1\6\2\0\2\6\30\0\2\6\1\0"+
    "\13\6\1\0\7\6\1\0\4\6\1\0\6\57\2\0"+
    "\62\57\7\0\1\10\75\0\1\60\1\61\101\0\1\62"+
    "\71\0\1\63\71\0\1\64\71\0\1\65\75\0\1\66"+
    "\42\0\1\6\2\0\2\6\30\0\1\6\1\67\1\0"+
    "\3\6\1\70\7\6\1\0\7\6\1\0\4\6\46\0"+
    "\1\71\1\0\1\72\23\0\1\6\2\0\2\6\30\0"+
    "\2\6\1\0\4\6\1\73\1\6\1\74\4\6\1\0"+
    "\7\6\1\0\4\6\2\0\1\6\2\0\2\6\30\0"+
    "\1\6\1\75\1\0\5\6\1\76\5\6\1\0\7\6"+
    "\1\0\4\6\2\0\1\6\2\0\2\6\30\0\2\6"+
    "\1\0\3\6\1\77\7\6\1\0\7\6\1\0\4\6"+
    "\2\0\1\6\2\0\2\6\30\0\2\6\1\0\5\6"+
    "\1\100\5\6\1\0\7\6\1\0\4\6\2\0\1\6"+
    "\2\0\2\6\30\0\2\6\1\0\11\6\1\101\1\6"+
    "\1\0\7\6\1\0\1\6\1\102\2\6\2\0\1\6"+
    "\2\0\2\6\30\0\1\6\1\103\1\0\3\6\1\104"+
    "\7\6\1\0\7\6\1\0\4\6\2\0\1\6\2\0"+
    "\2\6\30\0\2\6\1\0\7\6\1\105\3\6\1\0"+
    "\7\6\1\0\4\6\2\0\1\6\2\0\2\6\30\0"+
    "\1\6\1\106\1\0\7\6\1\107\3\6\1\0\7\6"+
    "\1\0\4\6\57\0\1\110\2\0\1\111\11\0\1\6"+
    "\2\0\2\6\30\0\2\6\1\0\13\6\1\0\1\6"+
    "\1\112\2\6\1\113\2\6\1\0\4\6\2\0\1\6"+
    "\2\0\2\6\30\0\2\6\1\0\7\6\1\114\3\6"+
    "\1\0\6\6\1\115\1\0\4\6\2\0\1\6\2\0"+
    "\2\6\30\0\1\6\1\116\1\0\3\6\1\117\7\6"+
    "\1\0\6\6\1\120\1\0\4\6\2\0\1\6\2\0"+
    "\2\6\30\0\2\6\1\121\1\122\6\6\1\123\3\6"+
    "\1\0\7\6\1\0\4\6\2\0\1\124\1\0\1\124"+
    "\5\0\1\124\60\0\6\57\1\125\1\0\62\57\7\60"+
    "\1\126\2\60\1\127\57\60\13\130\1\0\56\130\1\0"+
    "\1\6\2\0\2\6\30\0\2\6\1\131\1\132\12\6"+
    "\1\0\7\6\1\0\4\6\2\0\1\6\2\0\2\6"+
    "\30\0\2\6\1\0\11\6\1\133\1\6\1\0\7\6"+
    "\1\0\4\6\62\0\1\134\11\0\1\6\2\0\2\6"+
    "\30\0\2\6\1\0\13\6\1\0\4\6\1\135\2\6"+
    "\1\0\4\6\2\0\1\6\2\0\2\6\30\0\2\6"+
    "\1\0\13\6\1\0\5\6\1\136\1\6\1\0\4\6"+
    "\2\0\1\6\2\0\2\6\30\0\2\6\1\0\6\6"+
    "\1\137\4\6\1\0\7\6\1\0\4\6\2\0\1\6"+
    "\2\0\2\6\30\0\2\6\1\140\1\141\12\6\1\0"+
    "\7\6\1\0\4\6\2\0\1\6\2\0\2\6\30\0"+
    "\2\6\1\0\13\6\1\0\1\6\1\142\5\6\1\0"+
    "\4\6\2\0\1\6\2\0\2\6\30\0\2\6\1\0"+
    "\13\6\1\143\1\144\6\6\1\0\4\6\2\0\1\6"+
    "\2\0\2\6\30\0\2\6\1\0\5\6\1\145\5\6"+
    "\1\0\7\6\1\0\4\6\2\0\1\6\2\0\2\6"+
    "\30\0\2\6\1\0\7\6\1\146\3\6\1\0\7\6"+
    "\1\0\4\6\2\0\1\6\2\0\2\6\30\0\2\6"+
    "\1\0\11\6\1\147\1\6\1\0\7\6\1\0\4\6"+
    "\2\0\1\6\2\0\2\6\30\0\2\6\1\0\3\6"+
    "\1\150\7\6\1\0\7\6\1\0\4\6\2\0\1\6"+
    "\2\0\2\6\30\0\1\6\1\151\1\0\13\6\1\0"+
    "\7\6\1\0\4\6\2\0\1\6\2\0\2\6\30\0"+
    "\2\6\1\0\5\6\1\152\5\6\1\0\7\6\1\0"+
    "\4\6\41\0\2\153\100\0\1\154\22\0\1\6\2\0"+
    "\2\6\30\0\2\6\1\153\1\155\12\6\1\0\7\6"+
    "\1\0\4\6\2\0\1\6\2\0\2\6\30\0\2\6"+
    "\1\0\7\6\1\156\3\6\1\0\7\6\1\0\4\6"+
    "\2\0\1\6\2\0\2\6\30\0\2\6\1\157\1\160"+
    "\12\6\1\0\7\6\1\0\4\6\2\0\1\6\2\0"+
    "\2\6\30\0\2\6\1\161\1\162\12\6\1\0\7\6"+
    "\1\0\4\6\2\0\1\6\2\0\2\6\30\0\2\6"+
    "\1\0\4\6\1\163\6\6\1\0\7\6\1\0\4\6"+
    "\2\0\1\6\2\0\2\6\30\0\2\6\1\0\13\6"+
    "\1\164\1\165\6\6\1\0\4\6\2\0\1\6\2\0"+
    "\2\6\30\0\2\6\1\0\3\6\1\166\7\6\1\0"+
    "\7\6\1\0\4\6\62\0\1\167\11\0\1\6\2\0"+
    "\2\6\30\0\2\6\1\0\13\6\1\0\4\6\1\170"+
    "\2\6\1\0\4\6\2\0\1\6\2\0\2\6\30\0"+
    "\2\6\1\0\13\6\1\0\5\6\1\171\1\6\1\0"+
    "\4\6\10\0\1\126\62\0\14\130\1\172\55\130\42\0"+
    "\1\173\30\0\1\6\2\0\2\6\30\0\2\6\1\0"+
    "\1\6\1\174\11\6\1\0\7\6\1\0\4\6\2\0"+
    "\1\6\2\0\2\6\30\0\1\6\1\175\1\0\13\6"+
    "\1\0\7\6\1\0\4\6\2\0\1\6\2\0\2\6"+
    "\30\0\2\6\1\0\12\6\1\176\1\0\7\6\1\0"+
    "\4\6\2\0\1\6\2\0\2\6\30\0\2\6\1\177"+
    "\1\200\2\6\1\201\7\6\1\0\7\6\1\0\4\6"+
    "\46\0\1\202\25\0\1\6\2\0\2\6\30\0\2\6"+
    "\1\0\4\6\1\203\6\6\1\0\7\6\1\0\4\6"+
    "\2\0\1\6\2\0\2\6\30\0\1\204\1\6\1\0"+
    "\13\6\1\0\7\6\1\0\4\6\47\0\1\205\24\0"+
    "\1\6\2\0\2\6\30\0\2\6\1\0\5\6\1\206"+
    "\5\6\1\0\7\6\1\0\4\6\2\0\1\6\2\0"+
    "\2\6\30\0\2\6\1\0\13\6\1\0\7\6\1\0"+
    "\2\6\1\207\1\6\2\0\1\6\2\0\2\6\30\0"+
    "\2\6\1\0\13\6\1\210\1\211\6\6\1\0\4\6"+
    "\2\0\1\6\2\0\2\6\30\0\2\6\1\0\6\6"+
    "\1\212\4\6\1\0\7\6\1\0\4\6\2\0\1\6"+
    "\2\0\2\6\30\0\2\6\1\0\11\6\1\213\1\6"+
    "\1\0\7\6\1\0\4\6\2\0\1\6\2\0\2\6"+
    "\30\0\2\6\1\0\3\6\1\214\7\6\1\0\7\6"+
    "\1\0\4\6\62\0\1\215\50\0\2\216\31\0\1\6"+
    "\2\0\2\6\30\0\2\6\1\0\13\6\1\0\4\6"+
    "\1\217\2\6\1\0\4\6\2\0\1\6\2\0\2\6"+
    "\30\0\2\6\1\216\1\220\12\6\1\0\7\6\1\0"+
    "\4\6\62\0\1\221\11\0\1\6\2\0\2\6\30\0"+
    "\2\6\1\0\13\6\1\0\4\6\1\222\2\6\1\0"+
    "\4\6\53\0\1\223\20\0\1\6\2\0\2\6\30\0"+
    "\2\6\1\0\11\6\1\224\1\6\1\0\7\6\1\0"+
    "\4\6\2\0\1\6\2\0\2\6\30\0\2\6\1\0"+
    "\13\6\1\225\1\226\6\6\1\0\4\6\47\0\1\227"+
    "\24\0\1\6\2\0\2\6\30\0\2\6\1\0\5\6"+
    "\1\230\5\6\1\0\7\6\1\0\4\6\2\0\1\6"+
    "\2\0\2\6\30\0\2\6\1\0\7\6\1\231\3\6"+
    "\1\0\7\6\1\0\4\6\63\0\1\232\10\0\1\6"+
    "\2\0\2\6\30\0\2\6\1\0\13\6\1\0\5\6"+
    "\1\233\1\6\1\0\4\6\2\0\1\6\2\0\2\6"+
    "\30\0\2\6\1\0\5\6\1\234\5\6\1\0\7\6"+
    "\1\0\4\6\1\0\13\130\1\235\1\172\55\130\1\0"+
    "\1\6\2\0\2\6\30\0\2\6\1\0\7\6\1\236"+
    "\3\6\1\0\7\6\1\0\4\6\2\0\1\6\2\0"+
    "\2\6\30\0\2\6\1\0\11\6\1\237\1\6\1\0"+
    "\7\6\1\0\4\6\46\0\1\240\25\0\1\6\2\0"+
    "\2\6\30\0\2\6\1\0\4\6\1\241\6\6\1\0"+
    "\7\6\1\0\4\6\2\0\1\6\2\0\2\6\30\0"+
    "\2\6\1\0\13\6\1\0\5\6\1\242\1\6\1\0"+
    "\4\6\2\0\1\6\2\0\2\6\30\0\2\6\1\0"+
    "\3\6\1\243\7\6\1\0\7\6\1\0\4\6\47\0"+
    "\1\244\24\0\1\6\2\0\2\6\30\0\2\6\1\0"+
    "\5\6\1\245\5\6\1\0\7\6\1\0\4\6\2\0"+
    "\1\6\2\0\2\6\30\0\2\6\1\246\1\247\12\6"+
    "\1\0\7\6\1\0\4\6\2\0\1\6\2\0\2\6"+
    "\30\0\2\6\1\0\13\6\1\0\7\6\1\250\1\251"+
    "\3\6\60\0\1\252\57\0\1\253\25\0\1\6\2\0"+
    "\2\6\30\0\2\6\1\0\13\6\1\0\2\6\1\254"+
    "\4\6\1\0\4\6\2\0\1\6\2\0\2\6\30\0"+
    "\2\6\1\0\4\6\1\255\6\6\1\0\7\6\1\0"+
    "\4\6\47\0\1\256\24\0\1\6\2\0\2\6\30\0"+
    "\2\6\1\0\5\6\1\257\5\6\1\0\7\6\1\0"+
    "\4\6\47\0\1\260\24\0\1\6\2\0\2\6\30\0"+
    "\2\6\1\0\5\6\1\261\5\6\1\0\7\6\1\0"+
    "\4\6\40\0\1\262\33\0\1\6\2\0\2\6\30\0"+
    "\1\6\1\263\1\0\13\6\1\0\7\6\1\0\4\6"+
    "\53\0\1\264\20\0\1\6\2\0\2\6\30\0\2\6"+
    "\1\0\11\6\1\265\1\6\1\0\7\6\1\0\4\6"+
    "\2\0\1\6\2\0\2\6\30\0\2\6\1\0\5\6"+
    "\1\266\5\6\1\0\7\6\1\0\4\6\2\0\1\6"+
    "\2\0\2\6\30\0\2\6\1\0\5\6\1\267\5\6"+
    "\1\0\7\6\1\0\4\6\41\0\2\270\31\0\1\6"+
    "\2\0\2\6\30\0\2\6\1\270\1\271\12\6\1\0"+
    "\7\6\1\0\4\6\2\0\1\6\2\0\2\6\30\0"+
    "\2\6\1\0\11\6\1\272\1\6\1\0\7\6\1\0"+
    "\4\6\2\0\1\6\2\0\2\6\30\0\2\6\1\0"+
    "\11\6\1\273\1\6\1\0\7\6\1\0\4\6\60\0"+
    "\1\274\13\0\1\6\2\0\2\6\30\0\2\6\1\0"+
    "\13\6\1\0\2\6\1\275\4\6\1\0\4\6\64\0"+
    "\1\276\57\0\1\277\21\0\1\6\2\0\2\6\30\0"+
    "\2\6\1\0\13\6\1\0\6\6\1\300\1\0\4\6"+
    "\2\0\1\6\2\0\2\6\30\0\2\6\1\0\10\6"+
    "\1\301\2\6\1\0\7\6\1\0\4\6\53\0\1\302"+
    "\20\0\1\6\2\0\2\6\30\0\2\6\1\0\11\6"+
    "\1\303\1\6\1\0\7\6\1\0\4\6\40\0\1\304"+
    "\33\0\1\6\2\0\2\6\30\0\1\6\1\305\1\0"+
    "\13\6\1\0\7\6\1\0\4\6\2\0\1\6\2\0"+
    "\2\6\30\0\2\6\1\0\13\6\1\306\1\307\6\6"+
    "\1\0\4\6\51\0\1\310\22\0\1\6\2\0\2\6"+
    "\30\0\2\6\1\0\7\6\1\311\3\6\1\0\7\6"+
    "\1\0\4\6\2\0\1\6\2\0\2\6\30\0\2\6"+
    "\1\0\13\6\1\0\4\6\1\312\2\6\1\0\4\6"+
    "\2\0\1\6\2\0\2\6\30\0\1\6\1\313\1\0"+
    "\13\6\1\0\7\6\1\0\4\6\45\0\1\314\26\0"+
    "\1\6\2\0\2\6\30\0\2\6\1\0\3\6\1\315"+
    "\7\6\1\0\7\6\1\0\4\6\47\0\1\316\24\0"+
    "\1\6\2\0\2\6\30\0\2\6\1\0\5\6\1\317"+
    "\5\6\1\0\7\6\1\0\4\6\70\0\1\320\1\321"+
    "\2\0\1\6\2\0\2\6\30\0\2\6\1\0\13\6"+
    "\1\0\7\6\1\0\2\6\1\322\1\323\52\0\1\324"+
    "\21\0\1\6\2\0\2\6\30\0\2\6\1\0\10\6"+
    "\1\325\2\6\1\0\7\6\1\0\4\6\2\0\1\6"+
    "\2\0\2\6\30\0\2\6\1\0\7\6\1\326\3\6"+
    "\1\0\7\6\1\0\4\6\54\0\1\327\4\0\1\330"+
    "\12\0\1\6\2\0\2\6\30\0\2\6\1\0\12\6"+
    "\1\331\1\0\3\6\1\332\3\6\1\0\4\6\53\0"+
    "\1\333\20\0\1\6\2\0\2\6\30\0\2\6\1\0"+
    "\11\6\1\334\1\6\1\0\7\6\1\0\4\6\45\0"+
    "\1\335\65\0\2\336\31\0\1\6\2\0\2\6\30\0"+
    "\2\6\1\0\3\6\1\337\7\6\1\0\7\6\1\0"+
    "\4\6\2\0\1\6\2\0\2\6\30\0\2\6\1\336"+
    "\1\340\12\6\1\0\7\6\1\0\4\6\40\0\1\341"+
    "\33\0\1\6\2\0\2\6\30\0\1\6\1\342\1\0"+
    "\13\6\1\0\7\6\1\0\4\6\51\0\1\343\67\0"+
    "\1\344\24\0\1\6\2\0\2\6\30\0\2\6\1\0"+
    "\7\6\1\345\3\6\1\0\7\6\1\0\4\6\2\0"+
    "\1\6\2\0\2\6\30\0\2\6\1\0\5\6\1\346"+
    "\5\6\1\0\7\6\1\0\4\6\54\0\1\347\17\0"+
    "\1\6\2\0\2\6\30\0\2\6\1\0\12\6\1\350"+
    "\1\0\7\6\1\0\4\6\51\0\1\351\22\0\1\6"+
    "\2\0\2\6\30\0\2\6\1\0\7\6\1\352\3\6"+
    "\1\0\7\6\1\0\4\6\45\0\1\353\26\0\1\6"+
    "\2\0\2\6\30\0\2\6\1\0\3\6\1\354\7\6"+
    "\1\0\7\6\1\0\4\6\45\0\1\355\26\0\1\6"+
    "\2\0\2\6\30\0\2\6\1\0\3\6\1\356\7\6"+
    "\1\0\7\6\1\0\4\6\53\0\1\357\20\0\1\6"+
    "\2\0\2\6\30\0\2\6\1\0\11\6\1\360\1\6"+
    "\1\0\7\6\1\0\4\6\55\0\2\361\15\0\1\6"+
    "\2\0\2\6\30\0\2\6\1\0\13\6\1\361\1\362"+
    "\6\6\1\0\4\6\47\0\1\363\24\0\1\6\2\0"+
    "\2\6\30\0\2\6\1\0\5\6\1\364\5\6\1\0"+
    "\7\6\1\0\4\6\55\0\2\365\15\0\1\6\2\0"+
    "\2\6\30\0\2\6\1\0\13\6\1\365\1\366\6\6"+
    "\1\0\4\6\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10092];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\3\1\2\11\2\1\10\11"+
    "\5\1\5\11\17\1\1\0\1\11\1\0\1\1\1\0"+
    "\5\11\2\1\1\0\1\11\15\1\2\0\7\1\1\0"+
    "\3\1\2\11\1\1\2\0\2\1\1\11\3\1\1\0"+
    "\2\1\1\0\7\1\2\0\2\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\1\11\3\1"+
    "\1\0\2\1\1\11\2\1\1\11\2\1\1\0\4\1"+
    "\2\0\2\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\2\1\1\0\2\1\1\11\2\1\1\0\3\1"+
    "\1\11\1\1\1\0\1\1\1\11\1\1\2\0\2\1"+
    "\1\11\1\1\1\11\1\1\1\0\1\1\1\0\3\1"+
    "\1\0\3\1\1\0\1\1\2\11\2\1\1\0\3\1"+
    "\1\11\1\1\1\0\3\1\1\0\1\1\1\11\1\1"+
    "\2\11\2\1\1\0\2\1\2\0\2\1\1\0\1\1"+
    "\2\0\2\1\1\0\1\1\1\0\1\11\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Código de usuario
    // declarar un arraylist para los errores lexicos
    //public  static ArrayList<Exception_> erroresLexicos = new ArrayList<Exception_>() ;   <-


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexer(java.io.Reader in) {
      yyline = 1;
    yycolumn =1;
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 246) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(sym.VACIO, yyline, yycolumn,yytext());
            } 
            // fall through
          case 65: break;
          case 2: 
            { // agregar errores lexicos 
        //String errLex = "Error léxico : '"+yytext()+"' en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1);
        //System.out.println(errLex);
        //erroresLexicos.add(new Exception_ ("Léxico","El caracter : '"+yytext()+"' no pertenece al lenguaje StatPy Convertor", Integer.toString(yyline), Integer.toString(yycolumn+1)));
        String errLex = "Error lexico : '"+yytext()+"' en la linea: "+(yyline+1)+" y columna: "+(yycolumn+1);
        System.out.println(errLex);
            } 
            // fall through
          case 66: break;
          case 3: 
            { return new Symbol(sym.ENTERO, yyline, yycolumn,yytext());
            } 
            // fall through
          case 67: break;
          case 4: 
            { return new Symbol(sym.PUNTO, yyline, yycolumn,yytext());
            } 
            // fall through
          case 68: break;
          case 5: 
            { return new Symbol(sym.ID, yyline, yycolumn,yytext());
            } 
            // fall through
          case 69: break;
          case 6: 
            { /*Saltos de linea, ignorados*/
            } 
            // fall through
          case 70: break;
          case 7: 
            { /*Espacios en blanco, ignorados*/
            } 
            // fall through
          case 71: break;
          case 8: 
            { return new Symbol(sym.DIV, yyline, yycolumn,yytext());
            } 
            // fall through
          case 72: break;
          case 9: 
            { return new Symbol(sym.POR, yyline, yycolumn,yytext());
            } 
            // fall through
          case 73: break;
          case 10: 
            { return new Symbol(sym.PAR_IZQ, yyline, yycolumn,yytext());
            } 
            // fall through
          case 74: break;
          case 11: 
            { return new Symbol(sym.PAR_DER, yyline, yycolumn,yytext());
            } 
            // fall through
          case 75: break;
          case 12: 
            { return new Symbol(sym.LLAV_IZQ, yyline, yycolumn,yytext());
            } 
            // fall through
          case 76: break;
          case 13: 
            { return new Symbol(sym.LLAV_DER, yyline, yycolumn,yytext());
            } 
            // fall through
          case 77: break;
          case 14: 
            { return new Symbol(sym.COR_IZQ, yyline, yycolumn,yytext());
            } 
            // fall through
          case 78: break;
          case 15: 
            { return new Symbol(sym.COR_DER, yyline, yycolumn,yytext());
            } 
            // fall through
          case 79: break;
          case 16: 
            { return new Symbol(sym.DOLLAR, yyline, yycolumn,yytext());
            } 
            // fall through
          case 80: break;
          case 17: 
            { return new Symbol(sym.IGUAL, yyline, yycolumn,yytext());
            } 
            // fall through
          case 81: break;
          case 18: 
            { return new Symbol(sym.MAYOR_QUE, yyline, yycolumn,yytext());
            } 
            // fall through
          case 82: break;
          case 19: 
            { return new Symbol(sym.MENOR_QUE, yyline, yycolumn,yytext());
            } 
            // fall through
          case 83: break;
          case 20: 
            { return new Symbol(sym.NOT, yyline, yycolumn,yytext());
            } 
            // fall through
          case 84: break;
          case 21: 
            { return new Symbol(sym.PTCOMA, yyline, yycolumn,yytext());
            } 
            // fall through
          case 85: break;
          case 22: 
            { return new Symbol(sym.COMA, yyline, yycolumn,yytext());
            } 
            // fall through
          case 86: break;
          case 23: 
            { return new Symbol(sym.DOSPUNTOS, yyline, yycolumn,yytext());
            } 
            // fall through
          case 87: break;
          case 24: 
            { return new Symbol(sym.MAS, yyline, yycolumn,yytext());
            } 
            // fall through
          case 88: break;
          case 25: 
            { return new Symbol(sym.MENOS, yyline, yycolumn,yytext());
            } 
            // fall through
          case 89: break;
          case 26: 
            { return new Symbol(sym.OR, yyline, yycolumn,yytext());
            } 
            // fall through
          case 90: break;
          case 27: 
            { /*Comentarios de una linea, ignorados*/ System.out.println("Comentario de una linea: "+yytext() );
            } 
            // fall through
          case 91: break;
          case 28: 
            { return new Symbol(sym.COMPARADOR, yyline, yycolumn,yytext());
            } 
            // fall through
          case 92: break;
          case 29: 
            { return new Symbol(sym.MAYOR_IGUAL, yyline, yycolumn,yytext());
            } 
            // fall through
          case 93: break;
          case 30: 
            { return new Symbol(sym.MENOR_IGUAL, yyline, yycolumn,yytext());
            } 
            // fall through
          case 94: break;
          case 31: 
            { return new Symbol(sym.DISTINTO, yyline, yycolumn,yytext());
            } 
            // fall through
          case 95: break;
          case 32: 
            { return new Symbol(sym.AND, yyline, yycolumn,yytext());
            } 
            // fall through
          case 96: break;
          case 33: 
            { return new Symbol(sym.RIF, yyline, yycolumn,yytext());
            } 
            // fall through
          case 97: break;
          case 34: 
            { return new Symbol(sym.RDOWHILE, yyline, yycolumn,yytext());
            } 
            // fall through
          case 98: break;
          case 35: 
            { return new Symbol(sym.DECIMAL, yyline, yycolumn,yytext());
            } 
            // fall through
          case 99: break;
          case 36: 
            { return new Symbol(sym.CADENA, yyline, yycolumn,yytext());
            } 
            // fall through
          case 100: break;
          case 37: 
            { return new Symbol(sym.RINT, yyline, yycolumn,yytext());
            } 
            // fall through
          case 101: break;
          case 38: 
            { return new Symbol(sym.RFOR, yyline, yycolumn,yytext());
            } 
            // fall through
          case 102: break;
          case 39: 
            { return new Symbol(sym.RVOID, yyline, yycolumn,yytext());
            } 
            // fall through
          case 103: break;
          case 40: 
            { return new Symbol(sym.RMAIN, yyline, yycolumn,yytext());
            } 
            // fall through
          case 104: break;
          case 41: 
            { return new Symbol(sym.RELSE, yyline, yycolumn,yytext());
            } 
            // fall through
          case 105: break;
          case 42: 
            { return new Symbol(sym.REJEX, yyline, yycolumn,yytext());
            } 
            // fall through
          case 106: break;
          case 43: 
            { return new Symbol(sym.RBOOL, yyline, yycolumn,yytext());
            } 
            // fall through
          case 107: break;
          case 44: 
            { return new Symbol(sym.RCASE, yyline, yycolumn,yytext());
            } 
            // fall through
          case 108: break;
          case 45: 
            { return new Symbol(sym.RCHAR, yyline, yycolumn,yytext());
            } 
            // fall through
          case 109: break;
          case 46: 
            { return new Symbol(sym.RTRUE, yyline, yycolumn,yytext());
            } 
            // fall through
          case 110: break;
          case 47: 
            { /*Comentarios multilinea, ignorados*/ System.out.println("Comentario multilinea: "+yytext() );
            } 
            // fall through
          case 111: break;
          case 48: 
            { return new Symbol(sym.RFALSE, yyline, yycolumn,yytext());
            } 
            // fall through
          case 112: break;
          case 49: 
            { return new Symbol(sym.RBREAK, yyline, yycolumn,yytext());
            } 
            // fall through
          case 113: break;
          case 50: 
            { return new Symbol(sym.RWRITE, yyline, yycolumn,yytext());
            } 
            // fall through
          case 114: break;
          case 51: 
            { return new Symbol(sym.RWHILE, yyline, yycolumn,yytext());
            } 
            // fall through
          case 115: break;
          case 52: 
            { return new Symbol(sym.RDOUBLE, yyline, yycolumn,yytext());
            } 
            // fall through
          case 116: break;
          case 53: 
            { return new Symbol(sym.RSWITCH, yyline, yycolumn,yytext());
            } 
            // fall through
          case 117: break;
          case 54: 
            { return new Symbol(sym.RSTRING, yyline, yycolumn,yytext());
            } 
            // fall through
          case 118: break;
          case 55: 
            { return new Symbol(sym.RTITULO, yyline, yycolumn,yytext());
            } 
            // fall through
          case 119: break;
          case 56: 
            { return new Symbol(sym.RVALOR, yyline, yycolumn,yytext());
            } 
            // fall through
          case 120: break;
          case 57: 
            { return new Symbol(sym.RDEFAU, yyline, yycolumn,yytext());
            } 
            // fall through
          case 121: break;
          case 58: 
            { return new Symbol(sym.RCONSOLA, yyline, yycolumn,yytext());
            } 
            // fall through
          case 122: break;
          case 59: 
            { return new Symbol(sym.RTITULOX, yyline, yycolumn,yytext());
            } 
            // fall through
          case 123: break;
          case 60: 
            { return new Symbol(sym.RTITULOY, yyline, yycolumn,yytext());
            } 
            // fall through
          case 124: break;
          case 61: 
            { return new Symbol(sym.RNEWVALOR, yyline, yycolumn,yytext());
            } 
            // fall through
          case 125: break;
          case 62: 
            { return new Symbol(sym.RGRAFIPIE, yyline, yycolumn,yytext());
            } 
            // fall through
          case 126: break;
          case 63: 
            { return new Symbol(sym.RGRAFIBARRAS, yyline, yycolumn,yytext());
            } 
            // fall through
          case 127: break;
          case 64: 
            { return new Symbol(sym.RDEFGLOBAL, yyline, yycolumn,yytext());
            } 
            // fall through
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
