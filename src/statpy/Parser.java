
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package statpy;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\002\003\000\002\031" +
    "\004\000\002\031\003\000\002\032\003\000\002\033\007" +
    "\000\002\034\003\000\002\034\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\012\000\002" +
    "\036\004\000\002\036\003\000\002\037\007\000\002\037" +
    "\013\000\002\037\013\000\002\037\007\000\002\037\007" +
    "\000\002\040\003\000\002\040\003\000\002\040\012\000" +
    "\002\041\004\000\002\041\003\000\002\042\004\000\002" +
    "\042\003\000\002\042\003\000\002\042\004\000\002\042" +
    "\013\000\002\042\012\000\002\043\004\000\002\043\003" +
    "\000\002\044\004\000\002\044\003\000\002\044\004\000" +
    "\002\044\003\000\002\044\013\000\002\044\012\000\002" +
    "\003\004\000\002\003\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\011\000\002\006\007\000\002\006\006\000\002" +
    "\006\005\000\002\006\005\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\017\004\000\002\022\010\000\002\022\010\000" +
    "\002\022\010\000\002\022\010\000\002\007\011\000\002" +
    "\007\015\000\002\007\013\000\002\010\011\000\002\011" +
    "\004\000\002\011\003\000\002\012\007\000\002\012\006" +
    "\000\002\013\004\000\002\014\014\000\002\027\003\000" +
    "\002\027\005\000\002\027\005\000\002\015\011\000\002" +
    "\016\014\000\002\030\004\000\002\030\004\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\032\030\014\033\021\045\013\046\026\047" +
    "\030\050\007\051\016\052\027\057\004\063\005\064\006" +
    "\066\033\001\002\000\004\005\357\001\002\000\004\005" +
    "\340\001\002\000\004\005\332\001\002\000\004\030\uffc9" +
    "\001\002\000\040\002\uffd9\012\uffd9\030\uffd9\033\uffd9\045" +
    "\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\057\uffd9" +
    "\060\uffd9\063\uffd9\064\uffd9\066\uffd9\001\002\000\004\030" +
    "\325\001\002\000\040\002\uffda\012\uffda\030\uffda\033\uffda" +
    "\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\057" +
    "\uffda\060\uffda\063\uffda\064\uffda\066\uffda\001\002\000\004" +
    "\030\uffcc\001\002\000\004\021\322\001\002\000\042\002" +
    "\uffd8\012\uffd8\030\uffd8\033\uffd8\045\uffd8\046\uffd8\047\uffd8" +
    "\050\uffd8\051\uffd8\052\uffd8\057\uffd8\060\uffd8\063\uffd8\064" +
    "\uffd8\065\311\066\uffd8\001\002\000\004\030\uffc8\001\002" +
    "\000\040\002\uffd2\012\uffd2\030\uffd2\033\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\057\uffd2\060\uffd2" +
    "\063\uffd2\064\uffd2\066\uffd2\001\002\000\004\002\310\001" +
    "\002\000\012\034\123\035\126\036\122\037\125\001\002" +
    "\000\034\002\000\030\014\033\021\045\013\046\026\047" +
    "\030\050\007\051\016\052\027\057\004\063\005\064\006" +
    "\066\033\001\002\000\040\002\uffd6\012\uffd6\030\uffd6\033" +
    "\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6" +
    "\057\uffd6\060\uffd6\063\uffd6\064\uffd6\066\uffd6\001\002\000" +
    "\040\002\uffd7\012\uffd7\030\uffd7\033\uffd7\045\uffd7\046\uffd7" +
    "\047\uffd7\050\uffd7\051\uffd7\052\uffd7\057\uffd7\060\uffd7\063" +
    "\uffd7\064\uffd7\066\uffd7\001\002\000\040\002\uffd3\012\uffd3" +
    "\030\uffd3\033\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\052\uffd3\057\uffd3\060\uffd3\063\uffd3\064\uffd3\066\uffd3" +
    "\001\002\000\004\030\uffcb\001\002\000\004\005\106\001" +
    "\002\000\004\030\uffca\001\002\000\040\002\uffd4\012\uffd4" +
    "\030\uffd4\033\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051" +
    "\uffd4\052\uffd4\057\uffd4\060\uffd4\063\uffd4\064\uffd4\066\uffd4" +
    "\001\002\000\040\002\uffd5\012\uffd5\030\uffd5\033\uffd5\045" +
    "\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\057\uffd5" +
    "\060\uffd5\063\uffd5\064\uffd5\066\uffd5\001\002\000\004\016" +
    "\034\001\002\000\004\067\035\001\002\000\004\005\036" +
    "\001\002\000\022\023\041\026\043\027\040\030\045\031" +
    "\037\053\042\054\046\076\047\001\002\000\114\002\uffb0" +
    "\004\uffb0\006\uffb0\012\uffb0\013\uffb0\014\uffb0\021\uffb0\022" +
    "\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\033\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051" +
    "\uffb0\052\uffb0\053\uffb0\054\uffb0\057\uffb0\060\uffb0\063\uffb0" +
    "\064\uffb0\065\uffb0\066\uffb0\070\uffb0\071\uffb0\072\uffb0\073" +
    "\uffb0\074\uffb0\075\uffb0\076\uffb0\001\002\000\114\002\uffaf" +
    "\004\uffaf\006\uffaf\012\uffaf\013\uffaf\014\uffaf\021\uffaf\022" +
    "\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf" +
    "\031\uffaf\033\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051" +
    "\uffaf\052\uffaf\053\uffaf\054\uffaf\057\uffaf\060\uffaf\063\uffaf" +
    "\064\uffaf\065\uffaf\066\uffaf\070\uffaf\071\uffaf\072\uffaf\073" +
    "\uffaf\074\uffaf\075\uffaf\076\uffaf\001\002\000\022\023\041" +
    "\026\043\027\040\030\045\031\037\053\042\054\046\076" +
    "\047\001\002\000\114\002\uffae\004\uffae\006\uffae\012\uffae" +
    "\013\uffae\014\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025" +
    "\uffae\026\uffae\027\uffae\030\uffae\031\uffae\033\uffae\045\uffae" +
    "\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054" +
    "\uffae\057\uffae\060\uffae\063\uffae\064\uffae\065\uffae\066\uffae" +
    "\070\uffae\071\uffae\072\uffae\073\uffae\074\uffae\075\uffae\076" +
    "\uffae\001\002\000\114\002\uffb1\004\uffb1\006\uffb1\012\uffb1" +
    "\013\uffb1\014\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025" +
    "\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\033\uffb1\045\uffb1" +
    "\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054" +
    "\uffb1\057\uffb1\060\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1" +
    "\070\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1\075\uffb1\076" +
    "\uffb1\001\002\000\036\006\103\013\053\014\057\021\061" +
    "\022\056\023\052\024\055\025\060\070\054\071\065\072" +
    "\062\073\063\074\051\075\064\001\002\000\114\002\uffac" +
    "\004\uffac\006\uffac\012\uffac\013\uffac\014\uffac\021\uffac\022" +
    "\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac" +
    "\031\uffac\033\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051" +
    "\uffac\052\uffac\053\uffac\054\uffac\057\uffac\060\uffac\063\uffac" +
    "\064\uffac\065\uffac\066\uffac\070\uffac\071\uffac\072\uffac\073" +
    "\uffac\074\uffac\075\uffac\076\uffac\001\002\000\114\002\uffad" +
    "\004\uffad\006\uffad\012\uffad\013\uffad\014\uffad\021\uffad\022" +
    "\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad" +
    "\031\uffad\033\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051" +
    "\uffad\052\uffad\053\uffad\054\uffad\057\uffad\060\uffad\063\uffad" +
    "\064\uffad\065\uffad\066\uffad\070\uffad\071\uffad\072\uffad\073" +
    "\uffad\074\uffad\075\uffad\076\uffad\001\002\000\022\023\041" +
    "\026\043\027\040\030\045\031\037\053\042\054\046\076" +
    "\047\001\002\000\114\002\uffb3\004\uffb3\006\uffb3\012\uffb3" +
    "\013\053\014\057\021\061\022\056\023\052\024\055\025" +
    "\060\026\uffb3\027\uffb3\030\uffb3\031\uffb3\033\uffb3\045\uffb3" +
    "\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054" +
    "\uffb3\057\uffb3\060\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3" +
    "\070\054\071\065\072\062\073\063\074\uffb3\075\uffb3\076" +
    "\uffb3\001\002\000\022\023\041\026\043\027\040\030\045" +
    "\031\037\053\042\054\046\076\047\001\002\000\022\023" +
    "\041\026\043\027\040\030\045\031\037\053\042\054\046" +
    "\076\047\001\002\000\022\023\041\026\043\027\040\030" +
    "\045\031\037\053\042\054\046\076\047\001\002\000\022" +
    "\023\041\026\043\027\040\030\045\031\037\053\042\054" +
    "\046\076\047\001\002\000\022\023\041\026\043\027\040" +
    "\030\045\031\037\053\042\054\046\076\047\001\002\000" +
    "\022\023\041\026\043\027\040\030\045\031\037\053\042" +
    "\054\046\076\047\001\002\000\022\023\041\026\043\027" +
    "\040\030\045\031\037\053\042\054\046\076\047\001\002" +
    "\000\022\023\041\026\043\027\040\030\045\031\037\053" +
    "\042\054\046\076\047\001\002\000\022\023\041\026\043" +
    "\027\040\030\045\031\037\053\042\054\046\076\047\001" +
    "\002\000\022\023\041\026\043\027\040\030\045\031\037" +
    "\053\042\054\046\076\047\001\002\000\022\023\041\026" +
    "\043\027\040\030\045\031\037\053\042\054\046\076\047" +
    "\001\002\000\022\023\041\026\043\027\040\030\045\031" +
    "\037\053\042\054\046\076\047\001\002\000\022\023\041" +
    "\026\043\027\040\030\045\031\037\053\042\054\046\076" +
    "\047\001\002\000\114\002\uffa4\004\uffa4\006\uffa4\012\uffa4" +
    "\013\uffa4\014\uffa4\021\uffa4\022\056\023\052\024\055\025" +
    "\060\026\uffa4\027\uffa4\030\uffa4\031\uffa4\033\uffa4\045\uffa4" +
    "\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054" +
    "\uffa4\057\uffa4\060\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4" +
    "\070\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4\076" +
    "\uffa4\001\002\000\114\002\uff9f\004\uff9f\006\uff9f\012\uff9f" +
    "\013\053\014\057\021\061\022\056\023\052\024\055\025" +
    "\060\026\uff9f\027\uff9f\030\uff9f\031\uff9f\033\uff9f\045\uff9f" +
    "\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054" +
    "\uff9f\057\uff9f\060\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f" +
    "\070\054\071\065\072\062\073\063\074\uff9f\075\uff9f\076" +
    "\uff9f\001\002\000\114\002\uffa2\004\uffa2\006\uffa2\012\uffa2" +
    "\013\uffa2\014\uffa2\021\uffa2\022\056\023\052\024\055\025" +
    "\060\026\uffa2\027\uffa2\030\uffa2\031\uffa2\033\uffa2\045\uffa2" +
    "\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054" +
    "\uffa2\057\uffa2\060\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2" +
    "\070\uffa2\071\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2\076" +
    "\uffa2\001\002\000\114\002\uffa3\004\uffa3\006\uffa3\012\uffa3" +
    "\013\uffa3\014\uffa3\021\uffa3\022\056\023\052\024\055\025" +
    "\060\026\uffa3\027\uffa3\030\uffa3\031\uffa3\033\uffa3\045\uffa3" +
    "\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054" +
    "\uffa3\057\uffa3\060\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3" +
    "\070\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3\076" +
    "\uffa3\001\002\000\114\002\uffa1\004\uffa1\006\uffa1\012\uffa1" +
    "\013\uffa1\014\uffa1\021\uffa1\022\056\023\052\024\055\025" +
    "\060\026\uffa1\027\uffa1\030\uffa1\031\uffa1\033\uffa1\045\uffa1" +
    "\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054" +
    "\uffa1\057\uffa1\060\uffa1\063\uffa1\064\uffa1\065\uffa1\066\uffa1" +
    "\070\uffa1\071\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\076" +
    "\uffa1\001\002\000\114\002\uffa8\004\uffa8\006\uffa8\012\uffa8" +
    "\013\uffa8\014\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025" +
    "\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\033\uffa8\045\uffa8" +
    "\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054" +
    "\uffa8\057\uffa8\060\uffa8\063\uffa8\064\uffa8\065\uffa8\066\uffa8" +
    "\070\uffa8\071\uffa8\072\uffa8\073\uffa8\074\uffa8\075\uffa8\076" +
    "\uffa8\001\002\000\114\002\uffa6\004\uffa6\006\uffa6\012\uffa6" +
    "\013\uffa6\014\uffa6\021\uffa6\022\056\023\052\024\055\025" +
    "\060\026\uffa6\027\uffa6\030\uffa6\031\uffa6\033\uffa6\045\uffa6" +
    "\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054" +
    "\uffa6\057\uffa6\060\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6" +
    "\070\uffa6\071\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6\076" +
    "\uffa6\001\002\000\114\002\uffab\004\uffab\006\uffab\012\uffab" +
    "\013\uffab\014\uffab\021\uffab\022\uffab\023\uffab\024\055\025" +
    "\060\026\uffab\027\uffab\030\uffab\031\uffab\033\uffab\045\uffab" +
    "\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054" +
    "\uffab\057\uffab\060\uffab\063\uffab\064\uffab\065\uffab\066\uffab" +
    "\070\uffab\071\uffab\072\uffab\073\uffab\074\uffab\075\uffab\076" +
    "\uffab\001\002\000\114\002\uffa9\004\uffa9\006\uffa9\012\uffa9" +
    "\013\uffa9\014\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025" +
    "\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\033\uffa9\045\uffa9" +
    "\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054" +
    "\uffa9\057\uffa9\060\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9" +
    "\070\uffa9\071\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9\076" +
    "\uffa9\001\002\000\114\002\uffa5\004\uffa5\006\uffa5\012\uffa5" +
    "\013\uffa5\014\uffa5\021\uffa5\022\056\023\052\024\055\025" +
    "\060\026\uffa5\027\uffa5\030\uffa5\031\uffa5\033\uffa5\045\uffa5" +
    "\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054" +
    "\uffa5\057\uffa5\060\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5" +
    "\070\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076" +
    "\uffa5\001\002\000\114\002\uffa7\004\uffa7\006\uffa7\012\uffa7" +
    "\013\uffa7\014\uffa7\021\uffa7\022\056\023\052\024\055\025" +
    "\060\026\uffa7\027\uffa7\030\uffa7\031\uffa7\033\uffa7\045\uffa7" +
    "\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054" +
    "\uffa7\057\uffa7\060\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7" +
    "\070\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7\076" +
    "\uffa7\001\002\000\114\002\uffaa\004\uffaa\006\uffaa\012\uffaa" +
    "\013\uffaa\014\uffaa\021\uffaa\022\uffaa\023\uffaa\024\055\025" +
    "\060\026\uffaa\027\uffaa\030\uffaa\031\uffaa\033\uffaa\045\uffaa" +
    "\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054" +
    "\uffaa\057\uffaa\060\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa" +
    "\070\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa\075\uffaa\076" +
    "\uffaa\001\002\000\114\002\uffa0\004\uffa0\006\uffa0\012\uffa0" +
    "\013\053\014\057\021\061\022\056\023\052\024\055\025" +
    "\060\026\uffa0\027\uffa0\030\uffa0\031\uffa0\033\uffa0\045\uffa0" +
    "\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054" +
    "\uffa0\057\uffa0\060\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0" +
    "\070\054\071\065\072\062\073\063\074\uffa0\075\uffa0\076" +
    "\uffa0\001\002\000\004\004\104\001\002\000\040\002\uffd1" +
    "\012\uffd1\030\uffd1\033\uffd1\045\uffd1\046\uffd1\047\uffd1\050" +
    "\uffd1\051\uffd1\052\uffd1\057\uffd1\060\uffd1\063\uffd1\064\uffd1" +
    "\066\uffd1\001\002\000\114\002\uffb2\004\uffb2\006\uffb2\012" +
    "\uffb2\013\uffb2\014\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2" +
    "\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\033\uffb2\045" +
    "\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2" +
    "\054\uffb2\057\uffb2\060\uffb2\063\uffb2\064\uffb2\065\uffb2\066" +
    "\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2" +
    "\076\uffb2\001\002\000\022\023\041\026\043\027\040\030" +
    "\045\031\037\053\042\054\046\076\047\001\002\000\036" +
    "\006\110\013\053\014\057\021\061\022\056\023\052\024" +
    "\055\025\060\070\054\071\065\072\062\073\063\074\051" +
    "\075\064\001\002\000\004\011\111\001\002\000\032\030" +
    "\014\033\021\045\013\046\026\047\030\050\007\051\016" +
    "\052\027\057\004\063\005\064\006\066\033\001\002\000" +
    "\034\012\114\030\014\033\021\045\013\046\026\047\030" +
    "\050\007\051\016\052\027\057\004\063\005\064\006\066" +
    "\033\001\002\000\040\002\uffdb\012\uffdb\030\uffdb\033\uffdb" +
    "\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\057" +
    "\uffdb\060\uffdb\063\uffdb\064\uffdb\066\uffdb\001\002\000\042" +
    "\002\uffc2\012\uffc2\030\uffc2\033\uffc2\045\uffc2\046\uffc2\047" +
    "\uffc2\050\uffc2\051\uffc2\052\uffc2\056\115\057\uffc2\060\uffc2" +
    "\063\uffc2\064\uffc2\066\uffc2\001\002\000\006\011\116\052" +
    "\027\001\002\000\032\030\014\033\021\045\013\046\026" +
    "\047\030\050\007\051\016\052\027\057\004\063\005\064" +
    "\006\066\033\001\002\000\040\002\uffc0\012\uffc0\030\uffc0" +
    "\033\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052" +
    "\uffc0\057\uffc0\060\uffc0\063\uffc0\064\uffc0\066\uffc0\001\002" +
    "\000\034\012\121\030\014\033\021\045\013\046\026\047" +
    "\030\050\007\051\016\052\027\057\004\063\005\064\006" +
    "\066\033\001\002\000\040\002\uffc1\012\uffc1\030\uffc1\033" +
    "\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1" +
    "\057\uffc1\060\uffc1\063\uffc1\064\uffc1\066\uffc1\001\002\000" +
    "\004\005\303\001\002\000\004\005\276\001\002\000\040" +
    "\002\uffc7\012\uffc7\030\uffc7\033\uffc7\045\uffc7\046\uffc7\047" +
    "\uffc7\050\uffc7\051\uffc7\052\uffc7\057\uffc7\060\uffc7\063\uffc7" +
    "\064\uffc7\066\uffc7\001\002\000\004\005\161\001\002\000" +
    "\004\005\127\001\002\000\004\006\130\001\002\000\004" +
    "\011\131\001\002\000\006\046\133\050\132\001\002\000" +
    "\004\030\ufffb\001\002\000\004\030\ufffa\001\002\000\010" +
    "\012\ufffd\046\ufffd\050\ufffd\001\002\000\010\012\ufffe\046" +
    "\ufffe\050\ufffe\001\002\000\010\012\157\046\133\050\132" +
    "\001\002\000\004\030\140\001\002\000\004\021\141\001" +
    "\002\000\012\020\144\027\145\030\142\031\146\001\002" +
    "\000\004\004\ufff7\001\002\000\004\004\156\001\002\000" +
    "\004\011\147\001\002\000\004\004\ufff8\001\002\000\004" +
    "\004\ufff9\001\002\000\004\055\150\001\002\000\004\015" +
    "\151\001\002\000\004\031\152\001\002\000\004\015\153" +
    "\001\002\000\004\031\154\001\002\000\004\012\155\001" +
    "\002\000\004\004\ufff6\001\002\000\010\012\ufffc\046\ufffc" +
    "\050\ufffc\001\002\000\040\002\uffc5\012\uffc5\030\uffc5\033" +
    "\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5" +
    "\057\uffc5\060\uffc5\063\uffc5\064\uffc5\066\uffc5\001\002\000" +
    "\010\012\uffff\046\uffff\050\uffff\001\002\000\004\006\162" +
    "\001\002\000\004\011\163\001\002\000\006\046\165\050" +
    "\164\001\002\000\012\007\222\040\221\043\224\044\223" +
    "\001\002\000\004\007\172\001\002\000\010\012\170\046" +
    "\165\050\164\001\002\000\010\012\ufff4\046\ufff4\050\ufff4" +
    "\001\002\000\040\002\uffc3\012\uffc3\030\uffc3\033\uffc3\045" +
    "\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\057\uffc3" +
    "\060\uffc3\063\uffc3\064\uffc3\066\uffc3\001\002\000\010\012" +
    "\ufff5\046\ufff5\050\ufff5\001\002\000\004\010\173\001\002" +
    "\000\004\042\174\001\002\000\004\021\175\001\002\000" +
    "\004\011\176\001\002\000\010\020\203\027\202\030\177" +
    "\001\002\000\014\012\uffde\015\220\020\uffde\027\uffde\030" +
    "\uffde\001\002\000\012\012\215\020\203\027\202\030\177" +
    "\001\002\000\012\012\uffe2\020\uffe2\027\uffe2\030\uffe2\001" +
    "\002\000\014\012\uffe0\015\214\020\uffe0\027\uffe0\030\uffe0" +
    "\001\002\000\004\011\204\001\002\000\004\055\205\001" +
    "\002\000\004\015\206\001\002\000\004\031\207\001\002" +
    "\000\004\015\210\001\002\000\004\031\211\001\002\000" +
    "\004\012\212\001\002\000\014\012\uffdc\015\213\020\uffdc" +
    "\027\uffdc\030\uffdc\001\002\000\012\012\uffdd\020\uffdd\027" +
    "\uffdd\030\uffdd\001\002\000\012\012\uffe1\020\uffe1\027\uffe1" +
    "\030\uffe1\001\002\000\004\004\217\001\002\000\012\012" +
    "\uffe3\020\uffe3\027\uffe3\030\uffe3\001\002\000\010\012\ufff1" +
    "\046\ufff1\050\ufff1\001\002\000\012\012\uffdf\020\uffdf\027" +
    "\uffdf\030\uffdf\001\002\000\004\021\273\001\002\000\004" +
    "\010\245\001\002\000\004\021\242\001\002\000\004\021" +
    "\225\001\002\000\010\020\230\030\226\031\231\001\002" +
    "\000\004\004\uffed\001\002\000\004\004\241\001\002\000" +
    "\004\011\232\001\002\000\004\004\uffee\001\002\000\004" +
    "\055\233\001\002\000\004\015\234\001\002\000\004\031" +
    "\235\001\002\000\004\015\236\001\002\000\004\031\237" +
    "\001\002\000\004\012\240\001\002\000\004\004\uffec\001" +
    "\002\000\010\012\ufff0\046\ufff0\050\ufff0\001\002\000\010" +
    "\020\230\030\226\031\231\001\002\000\004\004\244\001" +
    "\002\000\010\012\uffef\046\uffef\050\uffef\001\002\000\004" +
    "\041\246\001\002\000\004\021\247\001\002\000\004\011" +
    "\250\001\002\000\010\020\254\030\251\031\255\001\002" +
    "\000\014\012\uffe7\015\272\020\uffe7\030\uffe7\031\uffe7\001" +
    "\002\000\012\012\uffea\020\uffea\030\uffea\031\uffea\001\002" +
    "\000\012\012\267\020\254\030\251\031\255\001\002\000" +
    "\004\011\257\001\002\000\014\012\uffe8\015\256\020\uffe8" +
    "\030\uffe8\031\uffe8\001\002\000\012\012\uffe9\020\uffe9\030" +
    "\uffe9\031\uffe9\001\002\000\004\055\260\001\002\000\004" +
    "\015\261\001\002\000\004\031\262\001\002\000\004\015" +
    "\263\001\002\000\004\031\264\001\002\000\004\012\265" +
    "\001\002\000\014\012\uffe4\015\266\020\uffe4\030\uffe4\031" +
    "\uffe4\001\002\000\012\012\uffe5\020\uffe5\030\uffe5\031\uffe5" +
    "\001\002\000\004\004\271\001\002\000\012\012\uffeb\020" +
    "\uffeb\030\uffeb\031\uffeb\001\002\000\010\012\ufff2\046\ufff2" +
    "\050\ufff2\001\002\000\012\012\uffe6\020\uffe6\030\uffe6\031" +
    "\uffe6\001\002\000\010\020\230\030\226\031\231\001\002" +
    "\000\004\004\275\001\002\000\010\012\ufff3\046\ufff3\050" +
    "\ufff3\001\002\000\004\006\277\001\002\000\004\011\300" +
    "\001\002\000\032\030\014\033\021\045\013\046\026\047" +
    "\030\050\007\051\016\052\027\057\004\063\005\064\006" +
    "\066\033\001\002\000\034\012\302\030\014\033\021\045" +
    "\013\046\026\047\030\050\007\051\016\052\027\057\004" +
    "\063\005\064\006\066\033\001\002\000\040\002\uffc6\012" +
    "\uffc6\030\uffc6\033\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6" +
    "\051\uffc6\052\uffc6\057\uffc6\060\uffc6\063\uffc6\064\uffc6\066" +
    "\uffc6\001\002\000\004\006\304\001\002\000\004\011\305" +
    "\001\002\000\006\046\165\050\164\001\002\000\010\012" +
    "\307\046\165\050\164\001\002\000\040\002\uffc4\012\uffc4" +
    "\030\uffc4\033\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051" +
    "\uffc4\052\uffc4\057\uffc4\060\uffc4\063\uffc4\064\uffc4\066\uffc4" +
    "\001\002\000\004\002\001\001\002\000\004\011\312\001" +
    "\002\000\032\030\014\033\021\045\013\046\026\047\030" +
    "\050\007\051\016\052\027\057\004\063\005\064\006\066" +
    "\033\001\002\000\034\012\314\030\014\033\021\045\013" +
    "\046\026\047\030\050\007\051\016\052\027\057\004\063" +
    "\005\064\006\066\033\001\002\000\004\064\315\001\002" +
    "\000\004\005\316\001\002\000\022\023\041\026\043\027" +
    "\040\030\045\031\037\053\042\054\046\076\047\001\002" +
    "\000\036\006\320\013\053\014\057\021\061\022\056\023" +
    "\052\024\055\025\060\070\054\071\065\072\062\073\063" +
    "\074\051\075\064\001\002\000\004\004\321\001\002\000" +
    "\040\002\uffb4\012\uffb4\030\uffb4\033\uffb4\045\uffb4\046\uffb4" +
    "\047\uffb4\050\uffb4\051\uffb4\052\uffb4\057\uffb4\060\uffb4\063" +
    "\uffb4\064\uffb4\066\uffb4\001\002\000\022\023\041\026\043" +
    "\027\040\030\045\031\037\053\042\054\046\076\047\001" +
    "\002\000\114\002\uffce\004\324\006\uffce\012\uffce\013\053" +
    "\014\057\021\061\022\056\023\052\024\055\025\060\026" +
    "\uffce\027\uffce\030\uffce\031\uffce\033\uffce\045\uffce\046\uffce" +
    "\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\057" +
    "\uffce\060\uffce\063\uffce\064\uffce\065\uffce\066\uffce\070\054" +
    "\071\065\072\062\073\063\074\051\075\064\076\uffce\001" +
    "\002\000\062\002\uffcf\006\uffcf\012\uffcf\023\uffcf\026\uffcf" +
    "\027\uffcf\030\uffcf\031\uffcf\033\uffcf\045\uffcf\046\uffcf\047" +
    "\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\057\uffcf" +
    "\060\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\076\uffcf\001" +
    "\002\000\006\004\327\021\326\001\002\000\022\023\041" +
    "\026\043\027\040\030\045\031\037\053\042\054\046\076" +
    "\047\001\002\000\062\002\uffcd\006\uffcd\012\uffcd\023\uffcd" +
    "\026\uffcd\027\uffcd\030\uffcd\031\uffcd\033\uffcd\045\uffcd\046" +
    "\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd" +
    "\057\uffcd\060\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\076" +
    "\uffcd\001\002\000\036\004\331\013\053\014\057\021\061" +
    "\022\056\023\052\024\055\025\060\070\054\071\065\072" +
    "\062\073\063\074\051\075\064\001\002\000\062\002\uffd0" +
    "\006\uffd0\012\uffd0\023\uffd0\026\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\033\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0" +
    "\052\uffd0\053\uffd0\054\uffd0\057\uffd0\060\uffd0\063\uffd0\064" +
    "\uffd0\065\uffd0\066\uffd0\076\uffd0\001\002\000\022\023\041" +
    "\026\043\027\040\030\045\031\037\053\042\054\046\076" +
    "\047\001\002\000\036\006\334\013\053\014\057\021\061" +
    "\022\056\023\052\024\055\025\060\070\054\071\065\072" +
    "\062\073\063\074\051\075\064\001\002\000\004\011\335" +
    "\001\002\000\032\030\014\033\021\045\013\046\026\047" +
    "\030\050\007\051\016\052\027\057\004\063\005\064\006" +
    "\066\033\001\002\000\034\012\337\030\014\033\021\045" +
    "\013\046\026\047\030\050\007\051\016\052\027\057\004" +
    "\063\005\064\006\066\033\001\002\000\040\002\uffb5\012" +
    "\uffb5\030\uffb5\033\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5" +
    "\051\uffb5\052\uffb5\057\uffb5\060\uffb5\063\uffb5\064\uffb5\066" +
    "\uffb5\001\002\000\016\030\014\045\013\046\026\047\030" +
    "\050\007\051\016\001\002\000\022\023\041\026\043\027" +
    "\040\030\045\031\037\053\042\054\046\076\047\001\002" +
    "\000\036\004\343\013\053\014\057\021\061\022\056\023" +
    "\052\024\055\025\060\070\054\071\065\072\062\073\063" +
    "\074\051\075\064\001\002\000\016\030\345\045\013\046" +
    "\026\047\030\050\007\051\016\001\002\000\004\006\uffb8" +
    "\001\002\000\010\021\322\022\353\023\354\001\002\000" +
    "\004\006\347\001\002\000\004\011\350\001\002\000\032" +
    "\030\014\033\021\045\013\046\026\047\030\050\007\051" +
    "\016\052\027\057\004\063\005\064\006\066\033\001\002" +
    "\000\034\012\352\030\014\033\021\045\013\046\026\047" +
    "\030\050\007\051\016\052\027\057\004\063\005\064\006" +
    "\066\033\001\002\000\040\002\uffb9\012\uffb9\030\uffb9\033" +
    "\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9" +
    "\057\uffb9\060\uffb9\063\uffb9\064\uffb9\066\uffb9\001\002\000" +
    "\004\022\356\001\002\000\004\023\355\001\002\000\004" +
    "\006\uffb6\001\002\000\004\006\uffb7\001\002\000\004\030" +
    "\360\001\002\000\004\006\361\001\002\000\004\011\362" +
    "\001\002\000\006\061\364\062\365\001\002\000\010\012" +
    "\uffbd\061\uffbd\062\uffbd\001\002\000\004\026\376\001\002" +
    "\000\004\017\371\001\002\000\010\012\367\061\364\062" +
    "\365\001\002\000\040\002\uffbf\012\uffbf\030\uffbf\033\uffbf" +
    "\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\057" +
    "\uffbf\060\uffbf\063\uffbf\064\uffbf\066\uffbf\001\002\000\010" +
    "\012\uffbe\061\uffbe\062\uffbe\001\002\000\032\030\014\033" +
    "\021\045\013\046\026\047\030\050\007\051\016\052\027" +
    "\057\004\063\005\064\006\066\033\001\002\000\034\030" +
    "\014\033\021\045\013\046\026\047\030\050\007\051\016" +
    "\052\027\057\004\060\374\063\005\064\006\066\033\001" +
    "\002\000\010\012\uffbb\061\uffbb\062\uffbb\001\002\000\004" +
    "\004\375\001\002\000\010\012\uffba\061\uffba\062\uffba\001" +
    "\002\000\004\017\377\001\002\000\032\030\014\033\021" +
    "\045\013\046\026\047\030\050\007\051\016\052\027\057" +
    "\004\063\005\064\006\066\033\001\002\000\034\030\014" +
    "\033\021\045\013\046\026\047\030\050\007\051\016\052" +
    "\027\057\004\060\374\063\005\064\006\066\033\001\002" +
    "\000\010\012\uffbc\061\uffbc\062\uffbc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\032\002\017\003\021\004\011\005\007\006" +
    "\014\007\022\010\031\014\030\015\024\016\016\017\023" +
    "\021\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\123\001\001\000\026\004" +
    "\112\005\007\006\014\007\022\010\031\014\030\015\024" +
    "\016\016\017\023\021\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\047\001\001\000\002\001\001\000\004" +
    "\030\101\001\001\000\004\030\100\001\001\000\004\030" +
    "\077\001\001\000\004\030\076\001\001\000\004\030\075" +
    "\001\001\000\004\030\074\001\001\000\004\030\073\001" +
    "\001\000\004\030\072\001\001\000\004\030\071\001\001" +
    "\000\004\030\070\001\001\000\004\030\067\001\001\000" +
    "\004\030\066\001\001\000\004\030\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\111\004\011\005\007\006\014\007\022\010\031\014" +
    "\030\015\024\016\016\017\023\021\010\001\001\000\026" +
    "\004\112\005\007\006\014\007\022\010\031\014\030\015" +
    "\024\016\016\017\023\021\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\116\001\001\000\030\003" +
    "\117\004\011\005\007\006\014\007\022\010\031\014\030" +
    "\015\024\016\016\017\023\021\010\001\001\000\002\001" +
    "\001\000\026\004\112\005\007\006\014\007\022\010\031" +
    "\014\030\015\024\016\016\017\023\021\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\031\135\032\134\033\133" +
    "\034\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\157\033\133" +
    "\034\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\036\165\037" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\043\177\044\200\001" +
    "\001\000\002\001\001\000\004\044\215\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\242\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\041\252\042\251\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\267\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\300\004\011\005\007\006\014\007" +
    "\022\010\031\014\030\015\024\016\016\017\023\021\010" +
    "\001\001\000\026\004\112\005\007\006\014\007\022\010" +
    "\031\014\030\015\024\016\016\017\023\021\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\036\305\037\166\001\001\000\004\037\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\312\004\011\005\007\006\014\007\022\010\031" +
    "\014\030\015\024\016\016\017\023\021\010\001\001\000" +
    "\026\004\112\005\007\006\014\007\022\010\031\014\030" +
    "\015\024\016\016\017\023\021\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\316\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\322\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\327\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\332\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\335\004" +
    "\011\005\007\006\014\007\022\010\031\014\030\015\024" +
    "\016\016\017\023\021\010\001\001\000\026\004\112\005" +
    "\007\006\014\007\022\010\031\014\030\015\024\016\016" +
    "\017\023\021\010\001\001\000\002\001\001\000\006\006" +
    "\340\021\010\001\001\000\004\030\341\001\001\000\002" +
    "\001\001\000\010\006\343\021\010\027\345\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\350\004\011\005\007\006\014\007" +
    "\022\010\031\014\030\015\024\016\016\017\023\021\010" +
    "\001\001\000\026\004\112\005\007\006\014\007\022\010" +
    "\031\014\030\015\024\016\016\017\023\021\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\365\012\362\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\367\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\371\004\011\005\007\006\014\007\022" +
    "\010\031\014\030\015\024\016\016\017\023\021\010\001" +
    "\001\000\030\004\112\005\007\006\014\007\022\010\031" +
    "\013\372\014\030\015\024\016\016\017\023\021\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\377\004\011\005\007\006" +
    "\014\007\022\010\031\014\030\015\024\016\016\017\023" +
    "\021\010\001\001\000\030\004\112\005\007\006\014\007" +
    "\022\010\031\013\u0100\014\030\015\024\016\016\017\023" +
    "\021\010\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible

    // declarar un arraylist para los errores sintacticos 
    //public static ArrayList<Exception_ > erroresSintacticos = new ArrayList<Exception_>();
    
    //public void syntax_error(Symbol s){
        //System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
      //  erroresSintacticos.add(new Exception_("Sintáctico", "Error Recuperable de sintaxis: "+ s.value , Integer.toString(s.left), Integer.toString(s.right) ));
    //}

    //public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        //System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
      //  erroresSintacticos.add(new Exception_ ("Sintáctico", "Error No Recuperable de sintaxis: "+ s.value , Integer.toString(s.left), Integer.toString(s.right) ));
    //}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= lista_instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_instruccion_grafica ::= lista_instruccion_grafica instruccion_grafica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instruccion_grafica",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instruccion_grafica ::= instruccion_grafica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instruccion_grafica",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion_grafica ::= asignacion_grafica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion_grafica",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // asignacion_grafica ::= tipo_dato_grafica ID IGUAL expresion_grafica PTCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_grafica",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipo_dato_grafica ::= RSTRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_grafica",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipo_dato_grafica ::= RDOUBLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_grafica",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresion_grafica ::= CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_grafica",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresion_grafica ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_grafica",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresion_grafica ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_grafica",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresion_grafica ::= DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA COMA CADENA LLAV_DER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_grafica",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_graf_barras ::= lista_graf_barras barras_instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_graf_barras",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_graf_barras ::= barras_instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_graf_barras",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // barras_instruccion ::= RSTRING RTITULO IGUAL barra_titu PTCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barras_instruccion",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // barras_instruccion ::= RSTRING COR_IZQ COR_DER REJEX IGUAL LLAV_IZQ arreglo LLAV_DER PTCOMA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 System.out.println("Encontro: "+val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barras_instruccion",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // barras_instruccion ::= RDOUBLE COR_IZQ COR_DER RVALOR IGUAL LLAV_IZQ arregloD LLAV_DER PTCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barras_instruccion",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // barras_instruccion ::= RSTRING RTITULOX IGUAL barra_titu PTCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barras_instruccion",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // barras_instruccion ::= RSTRING RTITULOY IGUAL barra_titu PTCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barras_instruccion",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // barra_titu ::= CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barra_titu",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // barra_titu ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barra_titu",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // barra_titu ::= DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA COMA CADENA LLAV_DER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barra_titu",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // arreglo ::= arreglo arreglo_valor 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b.toString() + a.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arreglo ::= arreglo_valor 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // arreglo_valor ::= CADENA COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT =a + b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_valor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // arreglo_valor ::= CADENA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_valor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // arreglo_valor ::= ID 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_valor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // arreglo_valor ::= ID COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a+b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_valor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arreglo_valor ::= DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA COMA CADENA LLAV_DER COMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_valor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // arreglo_valor ::= DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA COMA CADENA LLAV_DER 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_valor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // arregloD ::= arregloD arreglo_Dvalor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arregloD",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // arregloD ::= arreglo_Dvalor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arregloD",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // arreglo_Dvalor ::= DECIMAL COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_Dvalor",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // arreglo_Dvalor ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_Dvalor",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arreglo_Dvalor ::= ID COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_Dvalor",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arreglo_Dvalor ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_Dvalor",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arreglo_Dvalor ::= DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA COMA CADENA LLAV_DER COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_Dvalor",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arreglo_Dvalor ::= DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA COMA CADENA LLAV_DER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_Dvalor",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lista_instruccion ::= lista_instruccion instruccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString() + b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lista_instruccion ::= instruccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= imprimir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= void 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= if 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= switch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= for 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccion ::= while 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruccion ::= do_while 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // imprimir ::= RCONSOLA PUNTO RWRITE PAR_IZQ expresion PAR_DER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    RESULT = "\tprint(" + a + ")\n";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // asignacion ::= tipoDato ID IGUAL expresion PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = "\t"+a + "=" + b+"\n";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // asignacion ::= ID IGUAL expresion PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = "\t"+a + "=" + b+"\n";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asignacion ::= ID IGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = "\t"+a + "=" + b;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // asignacion ::= tipoDato ID PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = "\t"+a+"\n";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipoDato ::= RINT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipoDato ::= RDOUBLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipoDato ::= RCHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipoDato ::= RSTRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tipoDato ::= RBOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // void ::= RVOID tipofuncion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    RESULT = a;
    func.Funcion.codigo = a.toString();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("void",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tipofuncion ::= RMAIN PAR_IZQ PAR_DER LLAV_IZQ lista_instruccion LLAV_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
    RESULT = "def main ():\n" + a + "\nif__name__=\"__main__\":\n\tmain()";   

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tipofuncion ::= RDEFGLOBAL PAR_IZQ PAR_DER LLAV_IZQ lista_instruccion_grafica LLAV_DER 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tipofuncion ::= RGRAFIBARRAS PAR_IZQ PAR_DER LLAV_IZQ lista_graf_barras LLAV_DER 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tipofuncion ::= RGRAFIPIE PAR_IZQ PAR_DER LLAV_IZQ lista_graf_barras LLAV_DER 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // if ::= RIF PAR_IZQ expresion PAR_DER LLAV_IZQ lista_instruccion LLAV_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = "if "+a+":\n"+b ;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // if ::= RIF PAR_IZQ expresion PAR_DER LLAV_IZQ lista_instruccion LLAV_DER RELSE LLAV_IZQ lista_instruccion LLAV_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = "if "+a+":\n"+b+"\n\telse:\n"+c ;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // if ::= RIF PAR_IZQ expresion PAR_DER LLAV_IZQ lista_instruccion LLAV_DER RELSE if 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = "if "+a+":\n"+b+"\n\tel"+c ;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // switch ::= RSWITCH PAR_IZQ ID PAR_DER LLAV_IZQ bloquescases LLAV_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = "\ndef switch(case,"+a.toString()+"):\nswitcher = {\n"+b +"}\n";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // bloquescases ::= bloquescases case 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString() + b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquescases",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // bloquescases ::= case 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquescases",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // case ::= RCASE ENTERO DOSPUNTOS lista_instruccion cbreak 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
    func.Funcion.contadorCase = Integer.valueOf(a);
    String cadena = b.toString();
    cadena = cadena.substring(0, cadena.length() - 1);
    RESULT = a.toString()+": "+cadena+",\n";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // case ::= RDEFAU DOSPUNTOS lista_instruccion cbreak 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    func.Funcion.contadorCase += 1;
    String cadena = b.toString();
    cadena = cadena.substring(0, cadena.length() - 1);
    RESULT = func.Funcion.contadorCase+": "+cadena+",\n" ;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cbreak ::= RBREAK PTCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cbreak",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // for ::= RFOR PAR_IZQ asignacion expresion PTCOMA condicion PAR_DER LLAV_IZQ lista_instruccion LLAV_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    //id
    String cadena = a.toString();
    String rango = b.toString();
    String ran_inicio = func.Funcion.numero(cadena);
    String ran_final = func.Funcion.numero(rango);
    String id = func.Funcion.id(cadena);

    //rango
    RESULT = "for "+id+" in range("+ran_inicio+","+ran_final+"):\n"+c ;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condicion ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // condicion ::= ID MAS MAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // condicion ::= ID MENOS MENOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // while ::= RWHILE PAR_IZQ expresion PAR_DER LLAV_IZQ lista_instruccion LLAV_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
    RESULT = "while "+a+" :\n"+b ;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // do_while ::= asignacion RDOWHILE LLAV_IZQ lista_instruccion LLAV_DER RWHILE PAR_IZQ expresion PAR_DER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    RESULT = a+"while True:\n"+b+"if("+c+"):\n\tbreak" ;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("do_while",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= NOT expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "not "+a.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= MENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "- "+a.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= RTRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= RFALSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= expresion MAS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" + "+c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= expresion MENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" - "+c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= expresion POR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" * "+c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= expresion DIV expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" / "+c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= expresion MAYOR_QUE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" > "+c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= expresion MENOR_QUE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" < "+c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= expresion MAYOR_IGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" >= "+c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= expresion MENOR_IGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" <= "+c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= expresion COMPARADOR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" == "+c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= expresion DISTINTO expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" != "+c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= expresion IGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" = "+c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= expresion AND expresion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b.toString() + "and" + a.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= expresion OR expresion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b.toString() + "or" + a.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
