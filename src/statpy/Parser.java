
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package statpy;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\002\003\000\002\031" +
    "\004\000\002\031\003\000\002\032\003\000\002\033\007" +
    "\000\002\034\003\000\002\034\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\012\000\002\036\004\000\002" +
    "\036\003\000\002\037\007\000\002\037\013\000\002\037" +
    "\013\000\002\037\007\000\002\037\007\000\002\040\003" +
    "\000\002\040\003\000\002\040\012\000\002\041\004\000" +
    "\002\041\003\000\002\042\004\000\002\042\003\000\002" +
    "\042\003\000\002\042\004\000\002\042\013\000\002\042" +
    "\012\000\002\043\004\000\002\043\003\000\002\044\004" +
    "\000\002\044\003\000\002\044\004\000\002\044\003\000" +
    "\002\044\013\000\002\044\012\000\002\045\004\000\002" +
    "\045\003\000\002\046\007\000\002\046\013\000\002\046" +
    "\013\000\002\047\003\000\002\047\003\000\002\047\012" +
    "\000\002\050\004\000\002\050\003\000\002\051\004\000" +
    "\002\051\003\000\002\051\003\000\002\051\004\000\002" +
    "\051\013\000\002\051\012\000\002\052\004\000\002\052" +
    "\003\000\002\053\004\000\002\053\003\000\002\053\004" +
    "\000\002\053\003\000\002\053\013\000\002\053\012\000" +
    "\002\003\004\000\002\003\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\005\011\000\002\006\007\000\002\006\006\000" +
    "\002\006\005\000\002\006\005\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\017\004\000\002\022\010\000\002\022\010" +
    "\000\002\022\010\000\002\022\010\000\002\007\011\000" +
    "\002\007\015\000\002\007\013\000\002\010\011\000\002" +
    "\011\004\000\002\011\003\000\002\012\007\000\002\012" +
    "\006\000\002\013\004\000\002\014\014\000\002\027\003" +
    "\000\002\027\005\000\002\027\005\000\002\015\011\000" +
    "\002\016\014\000\002\030\004\000\002\030\004\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013e\000\032\030\014\033\021\045\013\046\026\047" +
    "\030\050\007\051\016\052\027\057\004\063\005\064\006" +
    "\066\032\001\002\000\004\005\u012e\001\002\000\004\005" +
    "\u011f\001\002\000\004\005\u0119\001\002\000\004\030\uffb2" +
    "\001\002\000\040\002\uffc2\012\uffc2\030\uffc2\033\uffc2\045" +
    "\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\057\uffc2" +
    "\060\uffc2\063\uffc2\064\uffc2\066\uffc2\001\002\000\004\030" +
    "\u0114\001\002\000\040\002\uffc3\012\uffc3\030\uffc3\033\uffc3" +
    "\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\057" +
    "\uffc3\060\uffc3\063\uffc3\064\uffc3\066\uffc3\001\002\000\004" +
    "\030\uffb5\001\002\000\004\021\u0111\001\002\000\042\002" +
    "\uffc1\012\uffc1\030\uffc1\033\uffc1\045\uffc1\046\uffc1\047\uffc1" +
    "\050\uffc1\051\uffc1\052\uffc1\057\uffc1\060\uffc1\063\uffc1\064" +
    "\uffc1\065\u0108\066\uffc1\001\002\000\004\030\uffb1\001\002" +
    "\000\040\002\uffbb\012\uffbb\030\uffbb\033\uffbb\045\uffbb\046" +
    "\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\057\uffbb\060\uffbb" +
    "\063\uffbb\064\uffbb\066\uffbb\001\002\000\004\002\u0107\001" +
    "\002\000\012\034\123\035\126\036\122\037\125\001\002" +
    "\000\034\002\000\030\014\033\021\045\013\046\026\047" +
    "\030\050\007\051\016\052\027\057\004\063\005\064\006" +
    "\066\032\001\002\000\040\002\uffbf\012\uffbf\030\uffbf\033" +
    "\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf" +
    "\057\uffbf\060\uffbf\063\uffbf\064\uffbf\066\uffbf\001\002\000" +
    "\040\002\uffc0\012\uffc0\030\uffc0\033\uffc0\045\uffc0\046\uffc0" +
    "\047\uffc0\050\uffc0\051\uffc0\052\uffc0\057\uffc0\060\uffc0\063" +
    "\uffc0\064\uffc0\066\uffc0\001\002\000\040\002\uffbc\012\uffbc" +
    "\030\uffbc\033\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051" +
    "\uffbc\052\uffbc\057\uffbc\060\uffbc\063\uffbc\064\uffbc\066\uffbc" +
    "\001\002\000\004\030\uffb4\001\002\000\004\005\106\001" +
    "\002\000\004\030\uffb3\001\002\000\040\002\uffbd\012\uffbd" +
    "\030\uffbd\033\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051" +
    "\uffbd\052\uffbd\057\uffbd\060\uffbd\063\uffbd\064\uffbd\066\uffbd" +
    "\001\002\000\004\016\034\001\002\000\040\002\uffbe\012" +
    "\uffbe\030\uffbe\033\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe" +
    "\051\uffbe\052\uffbe\057\uffbe\060\uffbe\063\uffbe\064\uffbe\066" +
    "\uffbe\001\002\000\004\067\035\001\002\000\004\005\036" +
    "\001\002\000\022\023\041\026\043\027\040\030\045\031" +
    "\037\053\042\054\046\076\047\001\002\000\114\002\uff99" +
    "\004\uff99\006\uff99\012\uff99\013\uff99\014\uff99\021\uff99\022" +
    "\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99" +
    "\031\uff99\033\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051" +
    "\uff99\052\uff99\053\uff99\054\uff99\057\uff99\060\uff99\063\uff99" +
    "\064\uff99\065\uff99\066\uff99\070\uff99\071\uff99\072\uff99\073" +
    "\uff99\074\uff99\075\uff99\076\uff99\001\002\000\114\002\uff98" +
    "\004\uff98\006\uff98\012\uff98\013\uff98\014\uff98\021\uff98\022" +
    "\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98" +
    "\031\uff98\033\uff98\045\uff98\046\uff98\047\uff98\050\uff98\051" +
    "\uff98\052\uff98\053\uff98\054\uff98\057\uff98\060\uff98\063\uff98" +
    "\064\uff98\065\uff98\066\uff98\070\uff98\071\uff98\072\uff98\073" +
    "\uff98\074\uff98\075\uff98\076\uff98\001\002\000\022\023\041" +
    "\026\043\027\040\030\045\031\037\053\042\054\046\076" +
    "\047\001\002\000\114\002\uff97\004\uff97\006\uff97\012\uff97" +
    "\013\uff97\014\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025" +
    "\uff97\026\uff97\027\uff97\030\uff97\031\uff97\033\uff97\045\uff97" +
    "\046\uff97\047\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054" +
    "\uff97\057\uff97\060\uff97\063\uff97\064\uff97\065\uff97\066\uff97" +
    "\070\uff97\071\uff97\072\uff97\073\uff97\074\uff97\075\uff97\076" +
    "\uff97\001\002\000\114\002\uff9a\004\uff9a\006\uff9a\012\uff9a" +
    "\013\uff9a\014\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025" +
    "\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\033\uff9a\045\uff9a" +
    "\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054" +
    "\uff9a\057\uff9a\060\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a" +
    "\070\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a\076" +
    "\uff9a\001\002\000\036\006\103\013\053\014\057\021\061" +
    "\022\056\023\052\024\055\025\060\070\054\071\065\072" +
    "\062\073\063\074\051\075\064\001\002\000\114\002\uff95" +
    "\004\uff95\006\uff95\012\uff95\013\uff95\014\uff95\021\uff95\022" +
    "\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95" +
    "\031\uff95\033\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051" +
    "\uff95\052\uff95\053\uff95\054\uff95\057\uff95\060\uff95\063\uff95" +
    "\064\uff95\065\uff95\066\uff95\070\uff95\071\uff95\072\uff95\073" +
    "\uff95\074\uff95\075\uff95\076\uff95\001\002\000\114\002\uff96" +
    "\004\uff96\006\uff96\012\uff96\013\uff96\014\uff96\021\uff96\022" +
    "\uff96\023\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96" +
    "\031\uff96\033\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051" +
    "\uff96\052\uff96\053\uff96\054\uff96\057\uff96\060\uff96\063\uff96" +
    "\064\uff96\065\uff96\066\uff96\070\uff96\071\uff96\072\uff96\073" +
    "\uff96\074\uff96\075\uff96\076\uff96\001\002\000\022\023\041" +
    "\026\043\027\040\030\045\031\037\053\042\054\046\076" +
    "\047\001\002\000\114\002\uff9c\004\uff9c\006\uff9c\012\uff9c" +
    "\013\053\014\057\021\061\022\056\023\052\024\055\025" +
    "\060\026\uff9c\027\uff9c\030\uff9c\031\uff9c\033\uff9c\045\uff9c" +
    "\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054" +
    "\uff9c\057\uff9c\060\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c" +
    "\070\054\071\065\072\062\073\063\074\uff9c\075\uff9c\076" +
    "\uff9c\001\002\000\022\023\041\026\043\027\040\030\045" +
    "\031\037\053\042\054\046\076\047\001\002\000\022\023" +
    "\041\026\043\027\040\030\045\031\037\053\042\054\046" +
    "\076\047\001\002\000\022\023\041\026\043\027\040\030" +
    "\045\031\037\053\042\054\046\076\047\001\002\000\022" +
    "\023\041\026\043\027\040\030\045\031\037\053\042\054" +
    "\046\076\047\001\002\000\022\023\041\026\043\027\040" +
    "\030\045\031\037\053\042\054\046\076\047\001\002\000" +
    "\022\023\041\026\043\027\040\030\045\031\037\053\042" +
    "\054\046\076\047\001\002\000\022\023\041\026\043\027" +
    "\040\030\045\031\037\053\042\054\046\076\047\001\002" +
    "\000\022\023\041\026\043\027\040\030\045\031\037\053" +
    "\042\054\046\076\047\001\002\000\022\023\041\026\043" +
    "\027\040\030\045\031\037\053\042\054\046\076\047\001" +
    "\002\000\022\023\041\026\043\027\040\030\045\031\037" +
    "\053\042\054\046\076\047\001\002\000\022\023\041\026" +
    "\043\027\040\030\045\031\037\053\042\054\046\076\047" +
    "\001\002\000\022\023\041\026\043\027\040\030\045\031" +
    "\037\053\042\054\046\076\047\001\002\000\022\023\041" +
    "\026\043\027\040\030\045\031\037\053\042\054\046\076" +
    "\047\001\002\000\114\002\uff8d\004\uff8d\006\uff8d\012\uff8d" +
    "\013\uff8d\014\uff8d\021\uff8d\022\056\023\052\024\055\025" +
    "\060\026\uff8d\027\uff8d\030\uff8d\031\uff8d\033\uff8d\045\uff8d" +
    "\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d\054" +
    "\uff8d\057\uff8d\060\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d" +
    "\070\uff8d\071\uff8d\072\uff8d\073\uff8d\074\uff8d\075\uff8d\076" +
    "\uff8d\001\002\000\114\002\uff88\004\uff88\006\uff88\012\uff88" +
    "\013\053\014\057\021\061\022\056\023\052\024\055\025" +
    "\060\026\uff88\027\uff88\030\uff88\031\uff88\033\uff88\045\uff88" +
    "\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054" +
    "\uff88\057\uff88\060\uff88\063\uff88\064\uff88\065\uff88\066\uff88" +
    "\070\054\071\065\072\062\073\063\074\uff88\075\uff88\076" +
    "\uff88\001\002\000\114\002\uff8b\004\uff8b\006\uff8b\012\uff8b" +
    "\013\uff8b\014\uff8b\021\uff8b\022\056\023\052\024\055\025" +
    "\060\026\uff8b\027\uff8b\030\uff8b\031\uff8b\033\uff8b\045\uff8b" +
    "\046\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054" +
    "\uff8b\057\uff8b\060\uff8b\063\uff8b\064\uff8b\065\uff8b\066\uff8b" +
    "\070\uff8b\071\uff8b\072\uff8b\073\uff8b\074\uff8b\075\uff8b\076" +
    "\uff8b\001\002\000\114\002\uff8c\004\uff8c\006\uff8c\012\uff8c" +
    "\013\uff8c\014\uff8c\021\uff8c\022\056\023\052\024\055\025" +
    "\060\026\uff8c\027\uff8c\030\uff8c\031\uff8c\033\uff8c\045\uff8c" +
    "\046\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054" +
    "\uff8c\057\uff8c\060\uff8c\063\uff8c\064\uff8c\065\uff8c\066\uff8c" +
    "\070\uff8c\071\uff8c\072\uff8c\073\uff8c\074\uff8c\075\uff8c\076" +
    "\uff8c\001\002\000\114\002\uff8a\004\uff8a\006\uff8a\012\uff8a" +
    "\013\uff8a\014\uff8a\021\uff8a\022\056\023\052\024\055\025" +
    "\060\026\uff8a\027\uff8a\030\uff8a\031\uff8a\033\uff8a\045\uff8a" +
    "\046\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054" +
    "\uff8a\057\uff8a\060\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a" +
    "\070\uff8a\071\uff8a\072\uff8a\073\uff8a\074\uff8a\075\uff8a\076" +
    "\uff8a\001\002\000\114\002\uff91\004\uff91\006\uff91\012\uff91" +
    "\013\uff91\014\uff91\021\uff91\022\uff91\023\uff91\024\uff91\025" +
    "\uff91\026\uff91\027\uff91\030\uff91\031\uff91\033\uff91\045\uff91" +
    "\046\uff91\047\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054" +
    "\uff91\057\uff91\060\uff91\063\uff91\064\uff91\065\uff91\066\uff91" +
    "\070\uff91\071\uff91\072\uff91\073\uff91\074\uff91\075\uff91\076" +
    "\uff91\001\002\000\114\002\uff8f\004\uff8f\006\uff8f\012\uff8f" +
    "\013\uff8f\014\uff8f\021\uff8f\022\056\023\052\024\055\025" +
    "\060\026\uff8f\027\uff8f\030\uff8f\031\uff8f\033\uff8f\045\uff8f" +
    "\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f\054" +
    "\uff8f\057\uff8f\060\uff8f\063\uff8f\064\uff8f\065\uff8f\066\uff8f" +
    "\070\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f\075\uff8f\076" +
    "\uff8f\001\002\000\114\002\uff94\004\uff94\006\uff94\012\uff94" +
    "\013\uff94\014\uff94\021\uff94\022\uff94\023\uff94\024\055\025" +
    "\060\026\uff94\027\uff94\030\uff94\031\uff94\033\uff94\045\uff94" +
    "\046\uff94\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054" +
    "\uff94\057\uff94\060\uff94\063\uff94\064\uff94\065\uff94\066\uff94" +
    "\070\uff94\071\uff94\072\uff94\073\uff94\074\uff94\075\uff94\076" +
    "\uff94\001\002\000\114\002\uff92\004\uff92\006\uff92\012\uff92" +
    "\013\uff92\014\uff92\021\uff92\022\uff92\023\uff92\024\uff92\025" +
    "\uff92\026\uff92\027\uff92\030\uff92\031\uff92\033\uff92\045\uff92" +
    "\046\uff92\047\uff92\050\uff92\051\uff92\052\uff92\053\uff92\054" +
    "\uff92\057\uff92\060\uff92\063\uff92\064\uff92\065\uff92\066\uff92" +
    "\070\uff92\071\uff92\072\uff92\073\uff92\074\uff92\075\uff92\076" +
    "\uff92\001\002\000\114\002\uff8e\004\uff8e\006\uff8e\012\uff8e" +
    "\013\uff8e\014\uff8e\021\uff8e\022\056\023\052\024\055\025" +
    "\060\026\uff8e\027\uff8e\030\uff8e\031\uff8e\033\uff8e\045\uff8e" +
    "\046\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054" +
    "\uff8e\057\uff8e\060\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e" +
    "\070\uff8e\071\uff8e\072\uff8e\073\uff8e\074\uff8e\075\uff8e\076" +
    "\uff8e\001\002\000\114\002\uff90\004\uff90\006\uff90\012\uff90" +
    "\013\uff90\014\uff90\021\uff90\022\056\023\052\024\055\025" +
    "\060\026\uff90\027\uff90\030\uff90\031\uff90\033\uff90\045\uff90" +
    "\046\uff90\047\uff90\050\uff90\051\uff90\052\uff90\053\uff90\054" +
    "\uff90\057\uff90\060\uff90\063\uff90\064\uff90\065\uff90\066\uff90" +
    "\070\uff90\071\uff90\072\uff90\073\uff90\074\uff90\075\uff90\076" +
    "\uff90\001\002\000\114\002\uff93\004\uff93\006\uff93\012\uff93" +
    "\013\uff93\014\uff93\021\uff93\022\uff93\023\uff93\024\055\025" +
    "\060\026\uff93\027\uff93\030\uff93\031\uff93\033\uff93\045\uff93" +
    "\046\uff93\047\uff93\050\uff93\051\uff93\052\uff93\053\uff93\054" +
    "\uff93\057\uff93\060\uff93\063\uff93\064\uff93\065\uff93\066\uff93" +
    "\070\uff93\071\uff93\072\uff93\073\uff93\074\uff93\075\uff93\076" +
    "\uff93\001\002\000\114\002\uff89\004\uff89\006\uff89\012\uff89" +
    "\013\053\014\057\021\061\022\056\023\052\024\055\025" +
    "\060\026\uff89\027\uff89\030\uff89\031\uff89\033\uff89\045\uff89" +
    "\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89\053\uff89\054" +
    "\uff89\057\uff89\060\uff89\063\uff89\064\uff89\065\uff89\066\uff89" +
    "\070\054\071\065\072\062\073\063\074\uff89\075\uff89\076" +
    "\uff89\001\002\000\004\004\104\001\002\000\040\002\uffba" +
    "\012\uffba\030\uffba\033\uffba\045\uffba\046\uffba\047\uffba\050" +
    "\uffba\051\uffba\052\uffba\057\uffba\060\uffba\063\uffba\064\uffba" +
    "\066\uffba\001\002\000\114\002\uff9b\004\uff9b\006\uff9b\012" +
    "\uff9b\013\uff9b\014\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b" +
    "\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\033\uff9b\045" +
    "\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b" +
    "\054\uff9b\057\uff9b\060\uff9b\063\uff9b\064\uff9b\065\uff9b\066" +
    "\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b" +
    "\076\uff9b\001\002\000\022\023\041\026\043\027\040\030" +
    "\045\031\037\053\042\054\046\076\047\001\002\000\036" +
    "\006\110\013\053\014\057\021\061\022\056\023\052\024" +
    "\055\025\060\070\054\071\065\072\062\073\063\074\051" +
    "\075\064\001\002\000\004\011\111\001\002\000\032\030" +
    "\014\033\021\045\013\046\026\047\030\050\007\051\016" +
    "\052\027\057\004\063\005\064\006\066\032\001\002\000" +
    "\034\012\114\030\014\033\021\045\013\046\026\047\030" +
    "\050\007\051\016\052\027\057\004\063\005\064\006\066" +
    "\032\001\002\000\040\002\uffc4\012\uffc4\030\uffc4\033\uffc4" +
    "\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\057" +
    "\uffc4\060\uffc4\063\uffc4\064\uffc4\066\uffc4\001\002\000\042" +
    "\002\uffab\012\uffab\030\uffab\033\uffab\045\uffab\046\uffab\047" +
    "\uffab\050\uffab\051\uffab\052\uffab\056\115\057\uffab\060\uffab" +
    "\063\uffab\064\uffab\066\uffab\001\002\000\006\011\116\052" +
    "\027\001\002\000\032\030\014\033\021\045\013\046\026" +
    "\047\030\050\007\051\016\052\027\057\004\063\005\064" +
    "\006\066\032\001\002\000\040\002\uffa9\012\uffa9\030\uffa9" +
    "\033\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052" +
    "\uffa9\057\uffa9\060\uffa9\063\uffa9\064\uffa9\066\uffa9\001\002" +
    "\000\034\012\121\030\014\033\021\045\013\046\026\047" +
    "\030\050\007\051\016\052\027\057\004\063\005\064\006" +
    "\066\032\001\002\000\040\002\uffaa\012\uffaa\030\uffaa\033" +
    "\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa" +
    "\057\uffaa\060\uffaa\063\uffaa\064\uffaa\066\uffaa\001\002\000" +
    "\004\005\272\001\002\000\004\005\265\001\002\000\040" +
    "\002\uffb0\012\uffb0\030\uffb0\033\uffb0\045\uffb0\046\uffb0\047" +
    "\uffb0\050\uffb0\051\uffb0\052\uffb0\057\uffb0\060\uffb0\063\uffb0" +
    "\064\uffb0\066\uffb0\001\002\000\004\005\160\001\002\000" +
    "\004\005\127\001\002\000\004\006\130\001\002\000\004" +
    "\011\131\001\002\000\006\046\133\050\132\001\002\000" +
    "\004\030\ufffb\001\002\000\004\030\ufffa\001\002\000\010" +
    "\012\ufffd\046\ufffd\050\ufffd\001\002\000\010\012\ufffe\046" +
    "\ufffe\050\ufffe\001\002\000\010\012\156\046\133\050\132" +
    "\001\002\000\004\030\140\001\002\000\004\021\141\001" +
    "\002\000\010\020\144\027\143\031\145\001\002\000\004" +
    "\004\155\001\002\000\004\004\ufff8\001\002\000\004\011" +
    "\146\001\002\000\004\004\ufff9\001\002\000\004\055\147" +
    "\001\002\000\004\015\150\001\002\000\004\031\151\001" +
    "\002\000\004\015\152\001\002\000\004\031\153\001\002" +
    "\000\004\012\154\001\002\000\004\004\ufff7\001\002\000" +
    "\010\012\ufffc\046\ufffc\050\ufffc\001\002\000\040\002\uffae" +
    "\012\uffae\030\uffae\033\uffae\045\uffae\046\uffae\047\uffae\050" +
    "\uffae\051\uffae\052\uffae\057\uffae\060\uffae\063\uffae\064\uffae" +
    "\066\uffae\001\002\000\010\012\uffff\046\uffff\050\uffff\001" +
    "\002\000\004\006\161\001\002\000\004\011\162\001\002" +
    "\000\006\046\165\050\164\001\002\000\010\012\263\046" +
    "\165\050\164\001\002\000\006\007\217\040\216\001\002" +
    "\000\004\007\167\001\002\000\010\012\uffdb\046\uffdb\050" +
    "\uffdb\001\002\000\004\010\170\001\002\000\004\042\171" +
    "\001\002\000\004\021\172\001\002\000\004\011\173\001" +
    "\002\000\010\020\200\027\177\030\174\001\002\000\014" +
    "\012\uffc7\015\215\020\uffc7\027\uffc7\030\uffc7\001\002\000" +
    "\012\012\uffcb\020\uffcb\027\uffcb\030\uffcb\001\002\000\012" +
    "\012\213\020\200\027\177\030\174\001\002\000\014\012" +
    "\uffc9\015\211\020\uffc9\027\uffc9\030\uffc9\001\002\000\004" +
    "\011\201\001\002\000\004\055\202\001\002\000\004\015" +
    "\203\001\002\000\004\031\204\001\002\000\004\015\205" +
    "\001\002\000\004\031\206\001\002\000\004\012\207\001" +
    "\002\000\014\012\uffc5\015\210\020\uffc5\027\uffc5\030\uffc5" +
    "\001\002\000\012\012\uffc6\020\uffc6\027\uffc6\030\uffc6\001" +
    "\002\000\012\012\uffca\020\uffca\027\uffca\030\uffca\001\002" +
    "\000\012\012\uffcc\020\uffcc\027\uffcc\030\uffcc\001\002\000" +
    "\004\004\214\001\002\000\010\012\uffd8\046\uffd8\050\uffd8" +
    "\001\002\000\012\012\uffc8\020\uffc8\027\uffc8\030\uffc8\001" +
    "\002\000\004\021\246\001\002\000\004\010\220\001\002" +
    "\000\004\041\221\001\002\000\004\021\222\001\002\000" +
    "\004\011\223\001\002\000\010\020\227\030\224\031\230" +
    "\001\002\000\014\012\uffd0\015\245\020\uffd0\030\uffd0\031" +
    "\uffd0\001\002\000\012\012\uffd3\020\uffd3\030\uffd3\031\uffd3" +
    "\001\002\000\012\012\243\020\227\030\224\031\230\001" +
    "\002\000\004\011\232\001\002\000\014\012\uffd1\015\231" +
    "\020\uffd1\030\uffd1\031\uffd1\001\002\000\012\012\uffd2\020" +
    "\uffd2\030\uffd2\031\uffd2\001\002\000\004\055\233\001\002" +
    "\000\004\015\234\001\002\000\004\031\235\001\002\000" +
    "\004\015\236\001\002\000\004\031\237\001\002\000\004" +
    "\012\240\001\002\000\014\012\uffcd\015\241\020\uffcd\030" +
    "\uffcd\031\uffcd\001\002\000\012\012\uffce\020\uffce\030\uffce" +
    "\031\uffce\001\002\000\012\012\uffd4\020\uffd4\030\uffd4\031" +
    "\uffd4\001\002\000\004\004\244\001\002\000\010\012\uffd9" +
    "\046\uffd9\050\uffd9\001\002\000\012\012\uffcf\020\uffcf\030" +
    "\uffcf\031\uffcf\001\002\000\010\020\251\030\247\031\252" +
    "\001\002\000\004\004\uffd6\001\002\000\004\004\262\001" +
    "\002\000\004\011\253\001\002\000\004\004\uffd7\001\002" +
    "\000\004\055\254\001\002\000\004\015\255\001\002\000" +
    "\004\031\256\001\002\000\004\015\257\001\002\000\004" +
    "\031\260\001\002\000\004\012\261\001\002\000\004\004" +
    "\uffd5\001\002\000\010\012\uffda\046\uffda\050\uffda\001\002" +
    "\000\040\002\uffac\012\uffac\030\uffac\033\uffac\045\uffac\046" +
    "\uffac\047\uffac\050\uffac\051\uffac\052\uffac\057\uffac\060\uffac" +
    "\063\uffac\064\uffac\066\uffac\001\002\000\010\012\uffdc\046" +
    "\uffdc\050\uffdc\001\002\000\004\006\266\001\002\000\004" +
    "\011\267\001\002\000\032\030\014\033\021\045\013\046" +
    "\026\047\030\050\007\051\016\052\027\057\004\063\005" +
    "\064\006\066\032\001\002\000\034\012\271\030\014\033" +
    "\021\045\013\046\026\047\030\050\007\051\016\052\027" +
    "\057\004\063\005\064\006\066\032\001\002\000\040\002" +
    "\uffaf\012\uffaf\030\uffaf\033\uffaf\045\uffaf\046\uffaf\047\uffaf" +
    "\050\uffaf\051\uffaf\052\uffaf\057\uffaf\060\uffaf\063\uffaf\064" +
    "\uffaf\066\uffaf\001\002\000\004\006\273\001\002\000\004" +
    "\011\274\001\002\000\006\046\275\050\276\001\002\000" +
    "\004\007\360\001\002\000\012\007\304\040\303\043\306" +
    "\044\305\001\002\000\010\012\301\046\275\050\276\001" +
    "\002\000\010\012\ufff5\046\ufff5\050\ufff5\001\002\000\040" +
    "\002\uffad\012\uffad\030\uffad\033\uffad\045\uffad\046\uffad\047" +
    "\uffad\050\uffad\051\uffad\052\uffad\057\uffad\060\uffad\063\uffad" +
    "\064\uffad\066\uffad\001\002\000\010\012\ufff6\046\ufff6\050" +
    "\ufff6\001\002\000\004\021\355\001\002\000\004\010\327" +
    "\001\002\000\004\021\324\001\002\000\004\021\307\001" +
    "\002\000\010\020\312\030\310\031\313\001\002\000\004" +
    "\004\uffee\001\002\000\004\004\323\001\002\000\004\011" +
    "\314\001\002\000\004\004\uffef\001\002\000\004\055\315" +
    "\001\002\000\004\015\316\001\002\000\004\031\317\001" +
    "\002\000\004\015\320\001\002\000\004\031\321\001\002" +
    "\000\004\012\322\001\002\000\004\004\uffed\001\002\000" +
    "\010\012\ufff1\046\ufff1\050\ufff1\001\002\000\010\020\312" +
    "\030\310\031\313\001\002\000\004\004\326\001\002\000" +
    "\010\012\ufff0\046\ufff0\050\ufff0\001\002\000\004\041\330" +
    "\001\002\000\004\021\331\001\002\000\004\011\332\001" +
    "\002\000\010\020\336\030\333\031\337\001\002\000\014" +
    "\012\uffe8\015\354\020\uffe8\030\uffe8\031\uffe8\001\002\000" +
    "\012\012\351\020\336\030\333\031\337\001\002\000\012" +
    "\012\uffeb\020\uffeb\030\uffeb\031\uffeb\001\002\000\004\011" +
    "\341\001\002\000\014\012\uffe9\015\340\020\uffe9\030\uffe9" +
    "\031\uffe9\001\002\000\012\012\uffea\020\uffea\030\uffea\031" +
    "\uffea\001\002\000\004\055\342\001\002\000\004\015\343" +
    "\001\002\000\004\031\344\001\002\000\004\015\345\001" +
    "\002\000\004\031\346\001\002\000\004\012\347\001\002" +
    "\000\014\012\uffe5\015\350\020\uffe5\030\uffe5\031\uffe5\001" +
    "\002\000\012\012\uffe6\020\uffe6\030\uffe6\031\uffe6\001\002" +
    "\000\004\004\353\001\002\000\012\012\uffec\020\uffec\030" +
    "\uffec\031\uffec\001\002\000\010\012\ufff3\046\ufff3\050\ufff3" +
    "\001\002\000\012\012\uffe7\020\uffe7\030\uffe7\031\uffe7\001" +
    "\002\000\010\020\312\030\310\031\313\001\002\000\004" +
    "\004\357\001\002\000\010\012\ufff4\046\ufff4\050\ufff4\001" +
    "\002\000\004\010\361\001\002\000\004\042\362\001\002" +
    "\000\004\021\363\001\002\000\004\011\364\001\002\000" +
    "\010\020\370\027\371\030\365\001\002\000\014\012\uffdf" +
    "\015\u0106\020\uffdf\027\uffdf\030\uffdf\001\002\000\012\012" +
    "\u0103\020\370\027\371\030\365\001\002\000\012\012\uffe3" +
    "\020\uffe3\027\uffe3\030\uffe3\001\002\000\004\011\373\001" +
    "\002\000\014\012\uffe1\015\372\020\uffe1\027\uffe1\030\uffe1" +
    "\001\002\000\012\012\uffe2\020\uffe2\027\uffe2\030\uffe2\001" +
    "\002\000\004\055\374\001\002\000\004\015\375\001\002" +
    "\000\004\031\376\001\002\000\004\015\377\001\002\000" +
    "\004\031\u0100\001\002\000\004\012\u0101\001\002\000\014" +
    "\012\uffdd\015\u0102\020\uffdd\027\uffdd\030\uffdd\001\002\000" +
    "\012\012\uffde\020\uffde\027\uffde\030\uffde\001\002\000\004" +
    "\004\u0105\001\002\000\012\012\uffe4\020\uffe4\027\uffe4\030" +
    "\uffe4\001\002\000\010\012\ufff2\046\ufff2\050\ufff2\001\002" +
    "\000\012\012\uffe0\020\uffe0\027\uffe0\030\uffe0\001\002\000" +
    "\004\002\001\001\002\000\004\011\u0109\001\002\000\032" +
    "\030\014\033\021\045\013\046\026\047\030\050\007\051" +
    "\016\052\027\057\004\063\005\064\006\066\032\001\002" +
    "\000\034\012\u010b\030\014\033\021\045\013\046\026\047" +
    "\030\050\007\051\016\052\027\057\004\063\005\064\006" +
    "\066\032\001\002\000\004\064\u010c\001\002\000\004\005" +
    "\u010d\001\002\000\022\023\041\026\043\027\040\030\045" +
    "\031\037\053\042\054\046\076\047\001\002\000\036\006" +
    "\u010f\013\053\014\057\021\061\022\056\023\052\024\055" +
    "\025\060\070\054\071\065\072\062\073\063\074\051\075" +
    "\064\001\002\000\004\004\u0110\001\002\000\040\002\uff9d" +
    "\012\uff9d\030\uff9d\033\uff9d\045\uff9d\046\uff9d\047\uff9d\050" +
    "\uff9d\051\uff9d\052\uff9d\057\uff9d\060\uff9d\063\uff9d\064\uff9d" +
    "\066\uff9d\001\002\000\022\023\041\026\043\027\040\030" +
    "\045\031\037\053\042\054\046\076\047\001\002\000\114" +
    "\002\uffb7\004\u0113\006\uffb7\012\uffb7\013\053\014\057\021" +
    "\061\022\056\023\052\024\055\025\060\026\uffb7\027\uffb7" +
    "\030\uffb7\031\uffb7\033\uffb7\045\uffb7\046\uffb7\047\uffb7\050" +
    "\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\057\uffb7\060\uffb7" +
    "\063\uffb7\064\uffb7\065\uffb7\066\uffb7\070\054\071\065\072" +
    "\062\073\063\074\051\075\064\076\uffb7\001\002\000\062" +
    "\002\uffb8\006\uffb8\012\uffb8\023\uffb8\026\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\033\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8" +
    "\051\uffb8\052\uffb8\053\uffb8\054\uffb8\057\uffb8\060\uffb8\063" +
    "\uffb8\064\uffb8\065\uffb8\066\uffb8\076\uffb8\001\002\000\006" +
    "\004\u0116\021\u0115\001\002\000\022\023\041\026\043\027" +
    "\040\030\045\031\037\053\042\054\046\076\047\001\002" +
    "\000\062\002\uffb6\006\uffb6\012\uffb6\023\uffb6\026\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\033\uffb6\045\uffb6\046\uffb6\047\uffb6" +
    "\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\057\uffb6\060" +
    "\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\076\uffb6\001\002" +
    "\000\036\004\u0118\013\053\014\057\021\061\022\056\023" +
    "\052\024\055\025\060\070\054\071\065\072\062\073\063" +
    "\074\051\075\064\001\002\000\062\002\uffb9\006\uffb9\012" +
    "\uffb9\023\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\033\uffb9" +
    "\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\054\uffb9\057\uffb9\060\uffb9\063\uffb9\064\uffb9\065\uffb9" +
    "\066\uffb9\076\uffb9\001\002\000\022\023\041\026\043\027" +
    "\040\030\045\031\037\053\042\054\046\076\047\001\002" +
    "\000\036\006\u011b\013\053\014\057\021\061\022\056\023" +
    "\052\024\055\025\060\070\054\071\065\072\062\073\063" +
    "\074\051\075\064\001\002\000\004\011\u011c\001\002\000" +
    "\032\030\014\033\021\045\013\046\026\047\030\050\007" +
    "\051\016\052\027\057\004\063\005\064\006\066\032\001" +
    "\002\000\034\012\u011e\030\014\033\021\045\013\046\026" +
    "\047\030\050\007\051\016\052\027\057\004\063\005\064" +
    "\006\066\032\001\002\000\040\002\uff9e\012\uff9e\030\uff9e" +
    "\033\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052" +
    "\uff9e\057\uff9e\060\uff9e\063\uff9e\064\uff9e\066\uff9e\001\002" +
    "\000\016\030\014\045\013\046\026\047\030\050\007\051" +
    "\016\001\002\000\022\023\041\026\043\027\040\030\045" +
    "\031\037\053\042\054\046\076\047\001\002\000\036\004" +
    "\u0122\013\053\014\057\021\061\022\056\023\052\024\055" +
    "\025\060\070\054\071\065\072\062\073\063\074\051\075" +
    "\064\001\002\000\016\030\u0124\045\013\046\026\047\030" +
    "\050\007\051\016\001\002\000\004\006\uffa1\001\002\000" +
    "\010\021\u0111\022\u012a\023\u012b\001\002\000\004\006\u0126" +
    "\001\002\000\004\011\u0127\001\002\000\032\030\014\033" +
    "\021\045\013\046\026\047\030\050\007\051\016\052\027" +
    "\057\004\063\005\064\006\066\032\001\002\000\034\012" +
    "\u0129\030\014\033\021\045\013\046\026\047\030\050\007" +
    "\051\016\052\027\057\004\063\005\064\006\066\032\001" +
    "\002\000\040\002\uffa2\012\uffa2\030\uffa2\033\uffa2\045\uffa2" +
    "\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\057\uffa2\060" +
    "\uffa2\063\uffa2\064\uffa2\066\uffa2\001\002\000\004\022\u012d" +
    "\001\002\000\004\023\u012c\001\002\000\004\006\uff9f\001" +
    "\002\000\004\006\uffa0\001\002\000\004\030\u012f\001\002" +
    "\000\004\006\u0130\001\002\000\004\011\u0131\001\002\000" +
    "\006\061\u0133\062\u0134\001\002\000\010\012\uffa6\061\uffa6" +
    "\062\uffa6\001\002\000\004\026\u013d\001\002\000\004\017" +
    "\u0138\001\002\000\010\012\u0136\061\u0133\062\u0134\001\002" +
    "\000\040\002\uffa8\012\uffa8\030\uffa8\033\uffa8\045\uffa8\046" +
    "\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\057\uffa8\060\uffa8" +
    "\063\uffa8\064\uffa8\066\uffa8\001\002\000\010\012\uffa7\061" +
    "\uffa7\062\uffa7\001\002\000\032\030\014\033\021\045\013" +
    "\046\026\047\030\050\007\051\016\052\027\057\004\063" +
    "\005\064\006\066\032\001\002\000\034\030\014\033\021" +
    "\045\013\046\026\047\030\050\007\051\016\052\027\057" +
    "\004\060\u013b\063\005\064\006\066\032\001\002\000\010" +
    "\012\uffa4\061\uffa4\062\uffa4\001\002\000\004\004\u013c\001" +
    "\002\000\010\012\uffa3\061\uffa3\062\uffa3\001\002\000\004" +
    "\017\u013e\001\002\000\032\030\014\033\021\045\013\046" +
    "\026\047\030\050\007\051\016\052\027\057\004\063\005" +
    "\064\006\066\032\001\002\000\034\030\014\033\021\045" +
    "\013\046\026\047\030\050\007\051\016\052\027\057\004" +
    "\060\u013b\063\005\064\006\066\032\001\002\000\010\012" +
    "\uffa5\061\uffa5\062\uffa5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013e\000\032\002\017\003\021\004\011\005\007\006" +
    "\014\007\022\010\032\014\030\015\024\016\016\017\023" +
    "\021\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\123\001\001\000\026\004" +
    "\112\005\007\006\014\007\022\010\032\014\030\015\024" +
    "\016\016\017\023\021\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\047\001\001\000\002\001\001\000\004" +
    "\030\101\001\001\000\004\030\100\001\001\000\004\030" +
    "\077\001\001\000\004\030\076\001\001\000\004\030\075" +
    "\001\001\000\004\030\074\001\001\000\004\030\073\001" +
    "\001\000\004\030\072\001\001\000\004\030\071\001\001" +
    "\000\004\030\070\001\001\000\004\030\067\001\001\000" +
    "\004\030\066\001\001\000\004\030\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\111\004\011\005\007\006\014\007\022\010\032\014" +
    "\030\015\024\016\016\017\023\021\010\001\001\000\026" +
    "\004\112\005\007\006\014\007\022\010\032\014\030\015" +
    "\024\016\016\017\023\021\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\116\001\001\000\030\003" +
    "\117\004\011\005\007\006\014\007\022\010\032\014\030" +
    "\015\024\016\016\017\023\021\010\001\001\000\002\001" +
    "\001\000\026\004\112\005\007\006\014\007\022\010\032" +
    "\014\030\015\024\016\016\017\023\021\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\031\135\032\134\033\133" +
    "\034\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\156\033\133" +
    "\034\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\045\162\046\165\001\001\000" +
    "\004\046\263\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\052\175\053\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\211\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\050\225\051\224\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\241\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\267\004\011\005\007\006\014\007\022" +
    "\010\032\014\030\015\024\016\016\017\023\021\010\001" +
    "\001\000\026\004\112\005\007\006\014\007\022\010\032" +
    "\014\030\015\024\016\016\017\023\021\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\036\276\037\277\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\310" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\324\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\041\333\042\334\001\001\000\002\001\001\000\004\042" +
    "\351\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\355\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\043\365\044\366\001" +
    "\001\000\002\001\001\000\004\044\u0103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\u0109\004\011\005\007" +
    "\006\014\007\022\010\032\014\030\015\024\016\016\017" +
    "\023\021\010\001\001\000\026\004\112\005\007\006\014" +
    "\007\022\010\032\014\030\015\024\016\016\017\023\021" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\u010d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\u0111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\u0116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\u0119\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\u011c\004\011\005\007\006\014\007\022" +
    "\010\032\014\030\015\024\016\016\017\023\021\010\001" +
    "\001\000\026\004\112\005\007\006\014\007\022\010\032" +
    "\014\030\015\024\016\016\017\023\021\010\001\001\000" +
    "\002\001\001\000\006\006\u011f\021\010\001\001\000\004" +
    "\030\u0120\001\001\000\002\001\001\000\010\006\u0122\021" +
    "\010\027\u0124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\u0127\004" +
    "\011\005\007\006\014\007\022\010\032\014\030\015\024" +
    "\016\016\017\023\021\010\001\001\000\026\004\112\005" +
    "\007\006\014\007\022\010\032\014\030\015\024\016\016" +
    "\017\023\021\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\u0134\012\u0131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u0136\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\u0138\004\011" +
    "\005\007\006\014\007\022\010\032\014\030\015\024\016" +
    "\016\017\023\021\010\001\001\000\030\004\112\005\007" +
    "\006\014\007\022\010\032\013\u0139\014\030\015\024\016" +
    "\016\017\023\021\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\u013e\004\011\005\007\006\014\007\022\010\032\014\030" +
    "\015\024\016\016\017\023\021\010\001\001\000\030\004" +
    "\112\005\007\006\014\007\022\010\032\013\u013f\014\030" +
    "\015\024\016\016\017\023\021\010\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible

    // declarar un arraylist para los errores sintacticos 
    //public static ArrayList<Exception_ > erroresSintacticos = new ArrayList<Exception_>();
    
    //public void syntax_error(Symbol s){
        //System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
      //  erroresSintacticos.add(new Exception_("Sintáctico", "Error Recuperable de sintaxis: "+ s.value , Integer.toString(s.left), Integer.toString(s.right) ));
    //}

    //public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        //System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
      //  erroresSintacticos.add(new Exception_ ("Sintáctico", "Error No Recuperable de sintaxis: "+ s.value , Integer.toString(s.left), Integer.toString(s.right) ));
    //}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= lista_instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_instruccion_grafica ::= lista_instruccion_grafica instruccion_grafica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instruccion_grafica",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instruccion_grafica ::= instruccion_grafica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instruccion_grafica",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion_grafica ::= asignacion_grafica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion_grafica",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // asignacion_grafica ::= tipo_dato_grafica ID IGUAL expresion_grafica PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
    func.Funcion.variablesGlobales.put(a, b.toString());
    //System.out.println("Clave: "+a+" , Valor: "+b)  ;  //TABLA DE SIMBOLOS PARA GRAFICAS 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion_grafica",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipo_dato_grafica ::= RSTRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_grafica",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipo_dato_grafica ::= RDOUBLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato_grafica",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresion_grafica ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_grafica",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresion_grafica ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_grafica",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresion_grafica ::= DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA COMA CADENA LLAV_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    
    String archivo = a.toString();
    String newArchi = archivo.substring(1);
    newArchi = newArchi.substring(0, newArchi.length() - 1);


    String clave = b.toString();


    RESULT = func.Funcion.buscaEstruc(newArchi, clave);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_grafica",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_graf_barras ::= lista_graf_barras barras_instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_graf_barras",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_graf_barras ::= barras_instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_graf_barras",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // barras_instruccion ::= RSTRING RTITULO IGUAL barra_titu PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            func.Funcion.Titulo.add(b.toString());
            func.Funcion.Hash_barras.put(a.toString(), func.Funcion.Titulo);
            System.out.println("Clave: "+a.toString()+", Valor:"+b.toString());
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barras_instruccion",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // barras_instruccion ::= RSTRING COR_IZQ COR_DER REJEX IGUAL LLAV_IZQ arreglo LLAV_DER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
            func.Funcion.Hash_barras.put(a.toString(), func.Funcion.EjeX);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barras_instruccion",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // barras_instruccion ::= RDOUBLE COR_IZQ COR_DER RVALOR IGUAL LLAV_IZQ arregloD LLAV_DER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
            func.Funcion.Hash_barras.put(a.toString(), func.Funcion.Valores);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barras_instruccion",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // barras_instruccion ::= RSTRING RTITULOX IGUAL barra_titu PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            func.Funcion.TituloX.add(b.toString());
            func.Funcion.Hash_barras.put(a.toString(), func.Funcion.TituloX);
            System.out.println("Clave: "+a.toString()+", Valor:"+b.toString());
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barras_instruccion",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // barras_instruccion ::= RSTRING RTITULOY IGUAL barra_titu PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            func.Funcion.TituloY.add(b.toString());
            func.Funcion.Hash_barras.put(a.toString(), func.Funcion.TituloY);
            System.out.println("Clave: "+a.toString()+", Valor:"+b.toString());
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barras_instruccion",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // barra_titu ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barra_titu",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // barra_titu ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = func.Funcion.buscaIdGlobal(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barra_titu",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // barra_titu ::= DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA COMA CADENA LLAV_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    String archivo = a.toString();
    String newArchi = archivo.substring(1);
    newArchi = newArchi.substring(0, newArchi.length() - 1);


    String clave = b.toString();


    RESULT = func.Funcion.buscaEstruc(newArchi, clave);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barra_titu",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // arreglo ::= arreglo arreglo_valor 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        func.Funcion.EjeX.add(a.toString());
        System.out.println("->prime Arrgle: "+ a.toString() );
        RESULT = b.toString() + a.toString();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // arreglo ::= arreglo_valor 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        func.Funcion.EjeX.add(b.toString());
        System.out.println("->segundo Arrgle: "+b.toString());
        RESULT = b.toString(); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arreglo_valor ::= CADENA COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_valor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // arreglo_valor ::= CADENA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_valor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // arreglo_valor ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = func.Funcion.buscaIdGlobal(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_valor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // arreglo_valor ::= ID COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = func.Funcion.buscaIdGlobal(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_valor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // arreglo_valor ::= DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA COMA CADENA LLAV_DER COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            String archivo = a.toString();
            String newArchi = archivo.substring(1);
            newArchi = newArchi.substring(0, newArchi.length() - 1);


            String clave = b.toString();


            RESULT = func.Funcion.buscaEstruc(newArchi, clave);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_valor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arreglo_valor ::= DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA COMA CADENA LLAV_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            String archivo = a.toString();
            String newArchi = archivo.substring(1);
            newArchi = newArchi.substring(0, newArchi.length() - 1);


            String clave = b.toString();


            RESULT = func.Funcion.buscaEstruc(newArchi, clave);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_valor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // arregloD ::= arregloD arreglo_Dvalor 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        func.Funcion.Valores.add(a.toString());
        System.out.println("->prime Arrgle: "+ a.toString() );
        RESULT = b.toString() + a.toString();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arregloD",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // arregloD ::= arreglo_Dvalor 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        func.Funcion.Valores.add(b.toString());
        System.out.println("->segundo Arrgle: "+b.toString());
        RESULT = b.toString(); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arregloD",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // arreglo_Dvalor ::= DECIMAL COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_Dvalor",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // arreglo_Dvalor ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_Dvalor",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // arreglo_Dvalor ::= ID COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.buscaIdGlobal(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_Dvalor",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arreglo_Dvalor ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = func.Funcion.buscaIdGlobal(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_Dvalor",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arreglo_Dvalor ::= DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA COMA CADENA LLAV_DER COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        String archivo = a.toString();
        String newArchi = archivo.substring(1);
        newArchi = newArchi.substring(0, newArchi.length() - 1);


        String clave = b.toString();


        RESULT = func.Funcion.buscaEstruc(newArchi, clave);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_Dvalor",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arreglo_Dvalor ::= DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA COMA CADENA LLAV_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        String archivo = a.toString();
        String newArchi = archivo.substring(1);
        newArchi = newArchi.substring(0, newArchi.length() - 1);


        String clave = b.toString();


        RESULT = func.Funcion.buscaEstruc(newArchi, clave);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_Dvalor",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lista_graf_pie ::= lista_graf_pie pie_instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_graf_pie",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lista_graf_pie ::= pie_instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_graf_pie",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // pie_instruccion ::= RSTRING RTITULO IGUAL pie_titu PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            func.Funcion.Titulo_pie.add(b.toString());
            func.Funcion.Hash_pie.put(a.toString(), func.Funcion.Titulo_pie);
            System.out.println("Clave: "+a.toString()+", Valor:"+b.toString());
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pie_instruccion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // pie_instruccion ::= RSTRING COR_IZQ COR_DER REJEX IGUAL LLAV_IZQ arreglo_pie LLAV_DER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
            func.Funcion.Hash_pie.put(a.toString(), func.Funcion.EjeX_pie);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pie_instruccion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // pie_instruccion ::= RDOUBLE COR_IZQ COR_DER RVALOR IGUAL LLAV_IZQ arreglo_pie_D LLAV_DER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
            func.Funcion.Hash_pie.put(a.toString(), func.Funcion.Valores_pie);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pie_instruccion",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // pie_titu ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pie_titu",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // pie_titu ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = func.Funcion.buscaIdGlobal(a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pie_titu",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // pie_titu ::= DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA COMA CADENA LLAV_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    String archivo = a.toString();
    String newArchi = archivo.substring(1);
    newArchi = newArchi.substring(0, newArchi.length() - 1);


    String clave = b.toString();


    RESULT = func.Funcion.buscaEstruc(newArchi, clave);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pie_titu",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arreglo_pie ::= arreglo_pie arreglo_pie_valor 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        func.Funcion.EjeX_pie.add(a.toString());
        System.out.println("->prime Arrgle: "+ a.toString() );
        RESULT = b.toString() + a.toString();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_pie",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arreglo_pie ::= arreglo_pie_valor 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        func.Funcion.EjeX_pie.add(b.toString());
        System.out.println("->segundo Arrgle: "+b.toString());
        RESULT = b.toString(); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_pie",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arreglo_pie_valor ::= CADENA COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_pie_valor",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arreglo_pie_valor ::= CADENA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_pie_valor",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arreglo_pie_valor ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = func.Funcion.buscaIdGlobal(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_pie_valor",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arreglo_pie_valor ::= ID COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = func.Funcion.buscaIdGlobal(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_pie_valor",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arreglo_pie_valor ::= DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA COMA CADENA LLAV_DER COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            String archivo = a.toString();
            String newArchi = archivo.substring(1);
            newArchi = newArchi.substring(0, newArchi.length() - 1);


            String clave = b.toString();


            RESULT = func.Funcion.buscaEstruc(newArchi, clave);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_pie_valor",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arreglo_pie_valor ::= DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA COMA CADENA LLAV_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            String archivo = a.toString();
            String newArchi = archivo.substring(1);
            newArchi = newArchi.substring(0, newArchi.length() - 1);


            String clave = b.toString();


            RESULT = func.Funcion.buscaEstruc(newArchi, clave);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_pie_valor",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arreglo_pie_D ::= arreglo_pie_D arreglo_pie_Dvalor 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        func.Funcion.Valores_pie.add(a.toString());
        System.out.println("->prime Arrgle: "+ a.toString() );
        RESULT = b.toString() + a.toString();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_pie_D",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arreglo_pie_D ::= arreglo_pie_Dvalor 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        func.Funcion.Valores_pie.add(b.toString());
        System.out.println("->segundo Arrgle: "+b.toString());
        RESULT = b.toString(); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_pie_D",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arreglo_pie_Dvalor ::= DECIMAL COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_pie_Dvalor",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arreglo_pie_Dvalor ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_pie_Dvalor",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arreglo_pie_Dvalor ::= ID COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func.Funcion.buscaIdGlobal(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_pie_Dvalor",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arreglo_pie_Dvalor ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = func.Funcion.buscaIdGlobal(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_pie_Dvalor",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arreglo_pie_Dvalor ::= DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA COMA CADENA LLAV_DER COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        String archivo = a.toString();
        String newArchi = archivo.substring(1);
        newArchi = newArchi.substring(0, newArchi.length() - 1);


        String clave = b.toString();


        RESULT = func.Funcion.buscaEstruc(newArchi, clave);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_pie_Dvalor",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // arreglo_pie_Dvalor ::= DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA COMA CADENA LLAV_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        String archivo = a.toString();
        String newArchi = archivo.substring(1);
        newArchi = newArchi.substring(0, newArchi.length() - 1);


        String clave = b.toString();


        RESULT = func.Funcion.buscaEstruc(newArchi, clave);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_pie_Dvalor",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // lista_instruccion ::= lista_instruccion instruccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString() + b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // lista_instruccion ::= instruccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_instruccion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // instruccion ::= imprimir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // instruccion ::= asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // instruccion ::= void 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // instruccion ::= if 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // instruccion ::= switch 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // instruccion ::= for 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // instruccion ::= while 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // instruccion ::= do_while 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // imprimir ::= RCONSOLA PUNTO RWRITE PAR_IZQ expresion PAR_DER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    RESULT = "\tprint(" + a + ")\n";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimir",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // asignacion ::= tipoDato ID IGUAL expresion PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = "\t"+a + "=" + b+"\n";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // asignacion ::= ID IGUAL expresion PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = "\t"+a + "=" + b+"\n";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // asignacion ::= ID IGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = "\t"+a + "=" + b;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // asignacion ::= tipoDato ID PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = "\t"+a+"\n";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tipoDato ::= RINT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tipoDato ::= RDOUBLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tipoDato ::= RCHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tipoDato ::= RSTRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tipoDato ::= RBOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // void ::= RVOID tipofuncion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    RESULT = a;
    func.Funcion.codigo = a.toString();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("void",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tipofuncion ::= RMAIN PAR_IZQ PAR_DER LLAV_IZQ lista_instruccion LLAV_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
    RESULT = "def main ():\n" + a + "\nif__name__=\"__main__\":\n\tmain()";   

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tipofuncion ::= RDEFGLOBAL PAR_IZQ PAR_DER LLAV_IZQ lista_instruccion_grafica LLAV_DER 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tipofuncion ::= RGRAFIBARRAS PAR_IZQ PAR_DER LLAV_IZQ lista_graf_barras LLAV_DER 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // tipofuncion ::= RGRAFIPIE PAR_IZQ PAR_DER LLAV_IZQ lista_graf_pie LLAV_DER 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipofuncion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // if ::= RIF PAR_IZQ expresion PAR_DER LLAV_IZQ lista_instruccion LLAV_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = "if "+a+":\n"+b ;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // if ::= RIF PAR_IZQ expresion PAR_DER LLAV_IZQ lista_instruccion LLAV_DER RELSE LLAV_IZQ lista_instruccion LLAV_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = "if "+a+":\n"+b+"\n\telse:\n"+c ;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // if ::= RIF PAR_IZQ expresion PAR_DER LLAV_IZQ lista_instruccion LLAV_DER RELSE if 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = "if "+a+":\n"+b+"\n\tel"+c ;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // switch ::= RSWITCH PAR_IZQ ID PAR_DER LLAV_IZQ bloquescases LLAV_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = "\ndef switch(case,"+a.toString()+"):\nswitcher = {\n"+b +"}\n";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // bloquescases ::= bloquescases case 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString() + b.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquescases",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // bloquescases ::= case 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquescases",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // case ::= RCASE ENTERO DOSPUNTOS lista_instruccion cbreak 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
    func.Funcion.contadorCase = Integer.valueOf(a);
    String cadena = b.toString();
    cadena = cadena.substring(0, cadena.length() - 1);
    RESULT = a.toString()+": "+cadena+",\n";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // case ::= RDEFAU DOSPUNTOS lista_instruccion cbreak 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    func.Funcion.contadorCase += 1;
    String cadena = b.toString();
    cadena = cadena.substring(0, cadena.length() - 1);
    RESULT = func.Funcion.contadorCase+": "+cadena+",\n" ;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // cbreak ::= RBREAK PTCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cbreak",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // for ::= RFOR PAR_IZQ asignacion expresion PTCOMA condicion PAR_DER LLAV_IZQ lista_instruccion LLAV_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    //id
    String cadena = a.toString();
    String rango = b.toString();
    String ran_inicio = func.Funcion.numero(cadena);
    String ran_final = func.Funcion.numero(rango);
    String id = func.Funcion.id(cadena);

    //rango
    RESULT = "for "+id+" in range("+ran_inicio+","+ran_final+"):\n"+c ;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // condicion ::= asignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // condicion ::= ID MAS MAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // condicion ::= ID MENOS MENOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // while ::= RWHILE PAR_IZQ expresion PAR_DER LLAV_IZQ lista_instruccion LLAV_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
    RESULT = "while "+a+" :\n"+b ;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // do_while ::= asignacion RDOWHILE LLAV_IZQ lista_instruccion LLAV_DER RWHILE PAR_IZQ expresion PAR_DER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    RESULT = a+"while True:\n"+b+"if("+c+"):\n\tbreak" ;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("do_while",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion ::= NOT expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "not "+a.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion ::= MENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "- "+a.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresion ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresion ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresion ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresion ::= RTRUE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresion ::= RFALSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresion ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresion ::= expresion MAS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" + "+c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresion ::= expresion MENOS expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" - "+c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresion ::= expresion POR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" * "+c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresion ::= expresion DIV expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" / "+c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expresion ::= expresion MAYOR_QUE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" > "+c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expresion ::= expresion MENOR_QUE expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" < "+c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expresion ::= expresion MAYOR_IGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" >= "+c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expresion ::= expresion MENOR_IGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" <= "+c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expresion ::= expresion COMPARADOR expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" == "+c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expresion ::= expresion DISTINTO expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" != "+c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expresion ::= expresion IGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a.toString()+" = "+c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expresion ::= expresion AND expresion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b.toString() + "and" + a.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expresion ::= expresion OR expresion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b.toString() + "or" + a.toString() ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
