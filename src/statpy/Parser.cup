package statpy;
import java_cup.runtime.*;
// importar arraylist
//import java.util.ArrayList;
// importar clase de excepciones
//import Errores.Exception_;


//PARSER 
parser code
{://Codigo visible

    // declarar un arraylist para los errores sintacticos 
    //public static ArrayList<Exception_ > erroresSintacticos = new ArrayList<Exception_>();
    
    //public void syntax_error(Symbol s){
        //System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
      //  erroresSintacticos.add(new Exception_("Sintáctico", "Error Recuperable de sintaxis: "+ s.value , Integer.toString(s.left), Integer.toString(s.right) ));
    //}

    //public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        //System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
      //  erroresSintacticos.add(new Exception_ ("Sintáctico", "Error No Recuperable de sintaxis: "+ s.value , Integer.toString(s.left), Integer.toString(s.right) ));
    //}

:}


terminal String PTCOMA,PAR_IZQ,PAR_DER,COR_IZQ,COR_DER,LLAV_IZQ,LLAV_DER,MAYOR_QUE,MENOR_QUE,COMA,PUNTO,DOSPUNTOS,DOLLAR; // mismo nombre en el archivo lexico
terminal String IGUAL;
terminal String MAS,MENOS,POR,DIV;
terminal String ENTERO,DECIMAL,ID,CADENA;
terminal String UMENOS;                             // para la precedencia para los negativos y no en 
terminal String RVOID,RMAIN, RDEFGLOBAL, RGRAFIBARRAS, RGRAFIPIE;
terminal String RTITULO, REJEX, RVALOR, RTITULOX, RTITULOY;
terminal String RINT,RDOUBLE,RCHAR,RSTRING,RBOOL;
terminal String RIF,RTRUE, RFALSE, RNEWVALOR, RELSE, RSWITCH, RBREAK, RCASE, RDEFAU, RFOR, RWHILE, RDOWHILE, RCONSOLA, RWRITE;
terminal String MAYOR_IGUAL, MENOR_IGUAL, COMPARADOR, DISTINTO, AND, OR, NOT;

//traduccion
non terminal inicio,lista_instruccion;                                   // terminales para las transiciones 
non terminal instruccion, imprimir, asignacion, if, switch, bloquescases, case, cbreak, for, while, do_while, void;
non terminal declaracion,tipoDato, tipofuncion, main, defglobal, barras, gpie, condicion;
non terminal expresion;

//grafica globales
non terminal lista_instruccion_grafica;
non terminal instruccion_grafica, asignacion_grafica, tipo_dato_grafica;
non terminal expresion_grafica;

//grafica barras 
non terminal lista_graf_barras;
non terminal barras_instruccion, barra_titu, arreglo, arreglo_valor, arregloD, arreglo_Dvalor;

//grafica pie 
non terminal lista_graf_pie;
non terminal pie_instruccion, pie_titu, arreglo_pie, arreglo_pie_valor, arreglo_pie_D, arreglo_pie_Dvalor;

//--------> PRECEDENCIA
precedence left AND, OR;
precedence right NOT;
precedence left MAYOR_QUE, IGUAL, MENOR_QUE, MAYOR_IGUAL, MENOR_IGUAL, COMPARADOR, DISTINTO;
precedence left MAS, MENOS;
precedence left DIV, POR;
precedence right UMENOS;


start with inicio;                                     // iniciar la gramataica 

//--------------------> PRODUCCIONES <-----------------------------------
inicio ::= lista_instruccion
    //|lista_instruccion_grafica
;

//-------------------> PARA GRAFICAS <-------------------
//globales
lista_instruccion_grafica ::= lista_instruccion_grafica instruccion_grafica
    |instruccion_grafica
;

instruccion_grafica ::= asignacion_grafica
;

asignacion_grafica ::= tipo_dato_grafica ID:a IGUAL expresion_grafica:b PTCOMA
{:  
    func.Funcion.variablesGlobales.put(a, b.toString());
    //System.out.println("Clave: "+a+" , Valor: "+b)  ;  //TABLA DE SIMBOLOS PARA GRAFICAS 
:}
;

tipo_dato_grafica ::= RSTRING
    |RDOUBLE 
;
expresion_grafica ::= CADENA:a      {: RESULT = a; :}       
    |DECIMAL:a                      {: RESULT = a; :}
    |DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA:a COMA CADENA:b LLAV_DER   
{:
    
    String archivo = a.toString();
    String newArchi = archivo.substring(1);
    newArchi = newArchi.substring(0, newArchi.length() - 1);


    String clave = b.toString();


    RESULT = func.Funcion.buscaEstruc(newArchi, clave);
:}
;


//barras

lista_graf_barras ::= lista_graf_barras barras_instruccion
    |barras_instruccion
;

barras_instruccion ::= RSTRING RTITULO:a IGUAL barra_titu:b PTCOMA    //tengo titulo y valor 
        {:
            func.Funcion.Titulo.add(b.toString());
            func.Funcion.Hash_barras.put(a.toString(), func.Funcion.Titulo);
            System.out.println("Clave: "+a.toString()+", Valor:"+b.toString());
        :}
    |RSTRING COR_IZQ COR_DER REJEX:a IGUAL LLAV_IZQ arreglo LLAV_DER PTCOMA   
        {:
            func.Funcion.Hash_barras.put(a.toString(), func.Funcion.EjeX);
        :}
    |RDOUBLE COR_IZQ COR_DER RVALOR:a IGUAL LLAV_IZQ arregloD LLAV_DER PTCOMA   
        {:
            func.Funcion.Hash_barras.put(a.toString(), func.Funcion.Valores);
        :}
    |RSTRING RTITULOX:a IGUAL barra_titu:b PTCOMA       ///PENDIENTE AQUI 
        {:
            func.Funcion.TituloX.add(b.toString());
            func.Funcion.Hash_barras.put(a.toString(), func.Funcion.TituloX);
            System.out.println("Clave: "+a.toString()+", Valor:"+b.toString());
        :}
    |RSTRING RTITULOY:a IGUAL barra_titu:b PTCOMA
        {:
            func.Funcion.TituloY.add(b.toString());
            func.Funcion.Hash_barras.put(a.toString(), func.Funcion.TituloY);
            System.out.println("Clave: "+a.toString()+", Valor:"+b.toString());
        :}
; 

barra_titu ::= CADENA:a                 {:  RESULT = a; :}
    |ID:a                               {:  RESULT = func.Funcion.buscaIdGlobal(a.toString()); :}
    |DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA:a COMA CADENA:b LLAV_DER
{:
    String archivo = a.toString();
    String newArchi = archivo.substring(1);
    newArchi = newArchi.substring(0, newArchi.length() - 1);


    String clave = b.toString();


    RESULT = func.Funcion.buscaEstruc(newArchi, clave);
:}
;

arreglo ::= arreglo:b arreglo_valor:a       ///ciclo para lista de valores 
    {:
        func.Funcion.EjeX.add(a.toString());
        System.out.println("->prime Arrgle: "+ a.toString() );
        RESULT = b.toString() + a.toString();
    :}
    |arreglo_valor:b      
    {:
        func.Funcion.EjeX.add(b.toString());
        System.out.println("->segundo Arrgle: "+b.toString());
        RESULT = b.toString(); 
    :}
;

arreglo_valor ::= CADENA:a COMA       {:RESULT = a;:}
    |CADENA:b       {:RESULT = b;:}
    |ID:a           {:RESULT = func.Funcion.buscaIdGlobal(a); :}  //SE DEBE HACER BUSQUEDA EN LA TABLA Y ASIGNARLE ESE VALOR 
    |ID:a COMA:b      {:RESULT = func.Funcion.buscaIdGlobal(a); :}
    |DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA:a COMA CADENA:b LLAV_DER COMA 
        {:
            String archivo = a.toString();
            String newArchi = archivo.substring(1);
            newArchi = newArchi.substring(0, newArchi.length() - 1);


            String clave = b.toString();


            RESULT = func.Funcion.buscaEstruc(newArchi, clave);
        :}
    |DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA:a COMA CADENA:b LLAV_DER 
        {:
            String archivo = a.toString();
            String newArchi = archivo.substring(1);
            newArchi = newArchi.substring(0, newArchi.length() - 1);


            String clave = b.toString();


            RESULT = func.Funcion.buscaEstruc(newArchi, clave);
        :}
;

arregloD ::= arregloD:b arreglo_Dvalor:a
    {:
        func.Funcion.Valores.add(a.toString());
        System.out.println("->prime Arrgle: "+ a.toString() );
        RESULT = b.toString() + a.toString();
    :}
    |arreglo_Dvalor:b
    {:
        func.Funcion.Valores.add(b.toString());
        System.out.println("->segundo Arrgle: "+b.toString());
        RESULT = b.toString(); 
    :}
;

arreglo_Dvalor ::= DECIMAL:a COMA       {: RESULT = a; :}
    |DECIMAL:a                          {: RESULT = a; :}
    |ID:a COMA                          {: RESULT = func.Funcion.buscaIdGlobal(a); :}    
    |ID:a                               {: RESULT = func.Funcion.buscaIdGlobal(a); :}
    |DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA:a COMA CADENA:b LLAV_DER COMA
        {:
        String archivo = a.toString();
        String newArchi = archivo.substring(1);
        newArchi = newArchi.substring(0, newArchi.length() - 1);


        String clave = b.toString();


        RESULT = func.Funcion.buscaEstruc(newArchi, clave);
        :}
    |DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA:a COMA CADENA:b LLAV_DER 
        {:
        String archivo = a.toString();
        String newArchi = archivo.substring(1);
        newArchi = newArchi.substring(0, newArchi.length() - 1);


        String clave = b.toString();


        RESULT = func.Funcion.buscaEstruc(newArchi, clave);
        :}
;

///Pie 
lista_graf_pie ::= lista_graf_pie pie_instruccion
    |pie_instruccion
;

pie_instruccion ::= RSTRING RTITULO:a IGUAL pie_titu:b PTCOMA    //tengo titulo y valor 
        {:
            func.Funcion.Titulo_pie.add(b.toString());
            func.Funcion.Hash_pie.put(a.toString(), func.Funcion.Titulo_pie);
            System.out.println("Clave: "+a.toString()+", Valor:"+b.toString());
        :}
    |RSTRING COR_IZQ COR_DER REJEX:a IGUAL LLAV_IZQ arreglo_pie LLAV_DER PTCOMA   
        {:
            func.Funcion.Hash_pie.put(a.toString(), func.Funcion.EjeX_pie);
        :}
    |RDOUBLE COR_IZQ COR_DER RVALOR:a IGUAL LLAV_IZQ arreglo_pie_D LLAV_DER PTCOMA   
        {:
            func.Funcion.Hash_pie.put(a.toString(), func.Funcion.Valores_pie);
        :}
; 

pie_titu ::= CADENA:a                 {:  RESULT = a; :}
    |ID:a                               {:  RESULT = func.Funcion.buscaIdGlobal(a.toString()); :}
    |DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA:a COMA CADENA:b LLAV_DER
{:
    String archivo = a.toString();
    String newArchi = archivo.substring(1);
    newArchi = newArchi.substring(0, newArchi.length() - 1);


    String clave = b.toString();


    RESULT = func.Funcion.buscaEstruc(newArchi, clave);
:}
;

arreglo_pie ::= arreglo_pie:b arreglo_pie_valor:a       ///ciclo para lista de valores 
    {:
        func.Funcion.EjeX_pie.add(a.toString());
        System.out.println("->prime Arrgle: "+ a.toString() );
        RESULT = b.toString() + a.toString();
    :}
    |arreglo_pie_valor:b      
    {:
        func.Funcion.EjeX_pie.add(b.toString());
        System.out.println("->segundo Arrgle: "+b.toString());
        RESULT = b.toString(); 
    :}
;

arreglo_pie_valor ::= CADENA:a COMA       {:RESULT = a;:}
    |CADENA:b       {:RESULT = b;:}
    |ID:a           {:RESULT = func.Funcion.buscaIdGlobal(a); :}  //SE DEBE HACER BUSQUEDA EN LA TABLA Y ASIGNARLE ESE VALOR 
    |ID:a COMA:b      {:RESULT = func.Funcion.buscaIdGlobal(a); :}
    |DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA:a COMA CADENA:b LLAV_DER COMA 
        {:
            String archivo = a.toString();
            String newArchi = archivo.substring(1);
            newArchi = newArchi.substring(0, newArchi.length() - 1);


            String clave = b.toString();


            RESULT = func.Funcion.buscaEstruc(newArchi, clave);
        :}
    |DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA:a COMA CADENA:b LLAV_DER 
        {:
            String archivo = a.toString();
            String newArchi = archivo.substring(1);
            newArchi = newArchi.substring(0, newArchi.length() - 1);


            String clave = b.toString();


            RESULT = func.Funcion.buscaEstruc(newArchi, clave);
        :}
;

arreglo_pie_D ::= arreglo_pie_D:b arreglo_pie_Dvalor:a
    {:
        func.Funcion.Valores_pie.add(a.toString());
        System.out.println("->prime Arrgle: "+ a.toString() );
        RESULT = b.toString() + a.toString();
    :}
    |arreglo_pie_Dvalor:b
    {:
        func.Funcion.Valores_pie.add(b.toString());
        System.out.println("->segundo Arrgle: "+b.toString());
        RESULT = b.toString(); 
    :}
;

arreglo_pie_Dvalor ::= DECIMAL:a COMA       {: RESULT = a; :}
    |DECIMAL:a                          {: RESULT = a; :}
    |ID:a COMA                          {: RESULT = func.Funcion.buscaIdGlobal(a); :}    
    |ID:a                               {: RESULT = func.Funcion.buscaIdGlobal(a); :}
    |DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA:a COMA CADENA:b LLAV_DER COMA
        {:
        String archivo = a.toString();
        String newArchi = archivo.substring(1);
        newArchi = newArchi.substring(0, newArchi.length() - 1);


        String clave = b.toString();


        RESULT = func.Funcion.buscaEstruc(newArchi, clave);
        :}
    |DOLLAR LLAV_IZQ RNEWVALOR COMA CADENA:a COMA CADENA:b LLAV_DER 
        {:
        String archivo = a.toString();
        String newArchi = archivo.substring(1);
        newArchi = newArchi.substring(0, newArchi.length() - 1);


        String clave = b.toString();


        RESULT = func.Funcion.buscaEstruc(newArchi, clave);
        :}
;



//-------------------> PARA TRADUCCION <-------------------
lista_instruccion ::= lista_instruccion:a instruccion:b     {: RESULT = a.toString() + b.toString(); :}
    |instruccion: a                                        {: RESULT = a.toString(); :}
;

instruccion ::=  void:a                     {: RESULT = a; :}
    |imprimir:a    {: RESULT = a; :}
    |asignacion:a               {: RESULT = a; :} 
    |if:a                       {: RESULT = a; :}
    |switch:a                   {: RESULT = a; :}
    |for:a                      {: RESULT = a; :}
    |while:a                    {: RESULT = a; :}
    |do_while:a                 {: RESULT = a; :}
;

void ::= RVOID tipofuncion:a   
{: 
    RESULT = a;
    func.Funcion.codigo = a.toString();
:}
;

tipofuncion ::= RMAIN PAR_IZQ PAR_DER LLAV_IZQ:x lista_instruccion:a LLAV_DER:y   
{: 
    String resultado = "";
    resultado = "def main ():\n";

    //arreglo 
    String[] texto = a.toString().split("\n"); 
    for (String linea : texto){
        linea = "\t"+linea;
        resultado += linea+"\n";
    }
    RESULT = resultado+"if__name__=\"__main__\":\n\tmain()";
:}
    |RDEFGLOBAL PAR_IZQ PAR_DER LLAV_IZQ lista_instruccion_grafica LLAV_DER     {: RESULT = ""; :}
    |RGRAFIBARRAS PAR_IZQ PAR_DER LLAV_IZQ lista_graf_barras LLAV_DER           {: RESULT = ""; :}
    |RGRAFIPIE PAR_IZQ PAR_DER LLAV_IZQ lista_graf_pie LLAV_DER              {: RESULT = ""; :}    
;

imprimir ::= RCONSOLA PUNTO RWRITE PAR_IZQ expresion:a PAR_DER PTCOMA 
{:
    RESULT = "print(" + a + ")\n";
:}
;

asignacion ::= tipoDato ID:a IGUAL expresion:b PTCOMA
{:
    RESULT = a + "=" + b+"\n";
:}
    |ID:a IGUAL expresion:b PTCOMA
{:
    RESULT = a + "=" + b+"\n";
:}
    |ID:a IGUAL expresion:b
{:
    RESULT = a + "=" + b;
:}
    |tipoDato ID:a PTCOMA
{:
    RESULT = a+"\n";
:}
;

tipoDato ::= RINT
    |RDOUBLE
    |RCHAR
    |RSTRING  
    |RBOOL
;

if ::= RIF PAR_IZQ expresion:a PAR_DER LLAV_IZQ lista_instruccion:b LLAV_DER
{:
    String resultado = "";
    resultado = "if "+a+":\n";

    //arreglo 
    String[] texto = b.toString().split("\n"); 
    for (String linea : texto){
        linea = "\t"+linea;
        resultado += linea+"\n";
    }
    RESULT = resultado;
:}
    |RIF PAR_IZQ expresion:a PAR_DER LLAV_IZQ lista_instruccion:b LLAV_DER RELSE LLAV_IZQ lista_instruccion:c LLAV_DER
{:  
    
    String resultado = "";
    resultado = "if "+a+":\n";

    //arreglo 
    String[] texto = b.toString().split("\n"); 
    for (String linea : texto){
        linea = "\t"+linea;
        resultado += linea+"\n";
    }
    resultado += "else:\n";

    //arreglo 
    String[] texto1 = c.toString().split("\n"); 
    for (String linea : texto1){
        linea = "\t"+linea;
        resultado += linea+"\n";
    }

    RESULT = resultado;
:}
    |RIF PAR_IZQ expresion:a PAR_DER LLAV_IZQ lista_instruccion:b LLAV_DER RELSE if:c
{:
    String resultado = "";
    resultado = "if "+a+":\n";

    //arreglo 
    String[] texto = b.toString().split("\n"); 
    for (String linea : texto){
        linea = "\t"+linea;
        resultado += linea+"\n";
    }
    resultado += "el";

    //arreglo 
    String[] texto1 = c.toString().split("\n"); 
    for (String linea : texto1){
        if (linea.charAt(0) == 'i' || linea.charAt(0) == 'I') {
            linea = linea;
        }else{
            linea = linea;
        }
        
        resultado += linea+"\n";
    }

    RESULT = resultado;
:}
;

switch ::= RSWITCH PAR_IZQ ID:a PAR_DER LLAV_IZQ bloquescases:b LLAV_DER
{:
    String resultado = "";
    resultado = "def switch(case,"+a.toString()+"):\nswitcher = {\n";

    //arreglo 
    String[] texto = b.toString().split("\n"); 
    for (String linea : texto){
        linea = "\t"+linea;
        resultado += linea+"\n";
    }
    RESULT = resultado+"}\n";
:}
;

bloquescases ::= bloquescases:a  case:b {: RESULT = a.toString() + b.toString(); :}
    |case:a                             {: RESULT = a.toString(); :}
;

case ::= RCASE ENTERO:a DOSPUNTOS lista_instruccion:b cbreak    
{: 
    func.Funcion.contadorCase = Integer.valueOf(a);
    String cadena = b.toString();
    cadena = cadena.substring(0, cadena.length() - 1);
    RESULT = a.toString()+": "+cadena+",\n";
:}
    |RDEFAU DOSPUNTOS lista_instruccion:b cbreak
{:
    func.Funcion.contadorCase += 1;
    String cadena = b.toString();
    cadena = cadena.substring(0, cadena.length() - 1);
    RESULT = func.Funcion.contadorCase+": "+cadena+",\n" ;
:}
;

cbreak ::= RBREAK PTCOMA
;

for ::= RFOR PAR_IZQ asignacion:a expresion:b PTCOMA condicion PAR_DER LLAV_IZQ lista_instruccion:c LLAV_DER  
{:
    //id
    String cadena = a.toString();
    String rango = b.toString();
    String ran_inicio = func.Funcion.numero(cadena);
    String ran_final = func.Funcion.numero(rango);
    String id = func.Funcion.id(cadena);
    
    String resultado = "";
    resultado = "for "+id+" in range("+ran_inicio+","+ran_final+"):\n";

    //arreglo 
    String[] texto = c.toString().split("\n"); 
    for (String linea : texto){
        linea = "\t"+linea;
        resultado += linea+"\n";
    }
    RESULT = resultado;
:}
;

condicion ::= asignacion
    |ID MAS MAS
    |ID MENOS MENOS
;

while ::= RWHILE PAR_IZQ expresion:a PAR_DER LLAV_IZQ lista_instruccion:b LLAV_DER 
{:  
    String resultado = "";
    resultado = "while "+a+" :\n";

    //arreglo 
    String[] texto = b.toString().split("\n"); 
    for (String linea : texto){
        linea = "\t"+linea;
        resultado += linea+"\n";
    }
    RESULT = resultado;
:}

;

do_while ::= asignacion:a RDOWHILE LLAV_IZQ lista_instruccion:b LLAV_DER RWHILE PAR_IZQ expresion:c PAR_DER PTCOMA
{:  
    String resultado = "";
    resultado = a+"while True:\n";

    //arreglo 
    String[] texto = b.toString().split("\n"); 
    for (String linea : texto){
        linea = "\t"+linea;
        resultado += linea+"\n";
    }
    resultado += "if("+c+"):\n\tbreak";
    
    
    RESULT = resultado;

:}
;


expresion ::= NOT expresion: a                  {: RESULT = "not "+a.toString() ; :}
    |MENOS expresion:a    {: RESULT = "- "+a.toString() ; :} %prec UMENOS 
    |ENTERO:a   {: RESULT = a; :}
    |CADENA:a   {: RESULT = a; :}          
    |DECIMAL:a  {: RESULT = a; :}
    |RTRUE:a    {: RESULT = a; :}
    |RFALSE:a   {: RESULT = a; :}
    |ID:a       {: RESULT = a; :}
    |expresion:a MAS:b expresion:c  {: RESULT = a.toString()+" + "+c.toString(); :}
    |expresion:a MENOS:b expresion:c         {: RESULT = a.toString()+" - "+c.toString(); :}
    |expresion:a POR:b expresion:c           {: RESULT = a.toString()+" * "+c.toString(); :}
    |expresion:a DIV:b expresion:c           {: RESULT = a.toString()+" / "+c.toString(); :}
    |expresion:a MAYOR_QUE:b expresion:c     {: RESULT = a.toString()+" > "+c.toString(); :}
    |expresion:a MENOR_QUE:b expresion:c     {: RESULT = a.toString()+" < "+c.toString(); :}
    |expresion:a MAYOR_IGUAL:b expresion:c   {: RESULT = a.toString()+" >= "+c.toString(); :}
    |expresion:a MENOR_IGUAL:b expresion:c   {: RESULT = a.toString()+" <= "+c.toString(); :}
    |expresion:a COMPARADOR:b expresion:c    {: RESULT = a.toString()+" == "+c.toString(); :}
    |expresion:a DISTINTO:b expresion:c      {: RESULT = a.toString()+" != "+c.toString(); :}
    |expresion:a IGUAL:b expresion:c         {: RESULT = a.toString()+" = "+c.toString(); :}
    |expresion:b AND expresion:a       {: RESULT = b.toString() + "and" + a.toString() ; :}
    |expresion:b OR expresion:a        {: RESULT = b.toString() + "or" + a.toString() ; :}
;